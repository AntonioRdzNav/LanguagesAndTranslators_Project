Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> MATHSCY
Rule 1     MATHSCY -> PROGRAM ID DECLARATIONS PROGRAM_BODY END SINGLE_POINT
Rule 2     DECLARATIONS -> VARIABLES_DECLARATION SUBPROCEDURES_DECLARATION
Rule 3     VARIABLES_DECLARATION -> DIM IDS_SEQUENCE AS VARIABLE_TYPE VARIABLES_DECLARATION
Rule 4     VARIABLES_DECLARATION -> <empty>
Rule 5     IDS_SEQUENCE -> ID COMMA IDS_SEQUENCE
Rule 6     IDS_SEQUENCE -> ID
Rule 7     VARIABLE_TYPE -> WORD
Rule 8     VARIABLE_TYPE -> WORD DIMENSIONAL_VAR_DECLARATION
Rule 9     VARIABLE_TYPE -> FLOAT
Rule 10    VARIABLE_TYPE -> FLOAT DIMENSIONAL_VAR_DECLARATION
Rule 11    DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET
Rule 12    DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET
Rule 13    DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET
Rule 14    SUBPROCEDURES_DECLARATION -> SUB PROCEDURE ID STATEMENTS RETURN SUBPROCEDURES_DECLARATION
Rule 15    SUBPROCEDURES_DECLARATION -> <empty>
Rule 16    PROGRAM_BODY -> MAIN DOUBLE_POINTS STATEMENTS
Rule 17    JUMPERS -> GOSUB ID
Rule 18    JUMPERS -> GOTO ID
Rule 19    JUMPERS -> ID DOUBLE_POINTS
Rule 20    VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION
Rule 21    VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
Rule 22    VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION
Rule 23    VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
Rule 24    DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
Rule 25    DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
Rule 26    DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
Rule 27    USER_INTERACTION -> CLS
Rule 28    USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
Rule 29    USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
Rule 30    USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
Rule 31    STRINGS_SEQUENCE -> STRING COMMA STRINGS_SEQUENCE
Rule 32    STRINGS_SEQUENCE -> STRING
Rule 33    STRINGS_SEQUENCE -> ID COMMA STRINGS_SEQUENCE
Rule 34    STRINGS_SEQUENCE -> ID
Rule 35    IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
Rule 36    ELSE_STATEMENT -> ELSE STATEMENTS
Rule 37    ELSE_STATEMENT -> ELSEIF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT
Rule 38    ELSE_STATEMENT -> <empty>
Rule 39    WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND
Rule 40    DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION
Rule 41    FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
Rule 42    SET_FOR_STEPS -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET
Rule 43    SET_FOR_STEPS -> <empty>
Rule 44    STATEMENTS -> JUMPERS STATEMENTS
Rule 45    STATEMENTS -> VARIABLE_ASSIGNATION STATEMENTS
Rule 46    STATEMENTS -> USER_INTERACTION STATEMENTS
Rule 47    STATEMENTS -> IF_STATEMENT STATEMENTS
Rule 48    STATEMENTS -> WHILE_STATEMENT STATEMENTS
Rule 49    STATEMENTS -> FOR_STATEMENT STATEMENTS
Rule 50    STATEMENTS -> DO_STATEMENT STATEMENTS
Rule 51    STATEMENTS -> <empty>
Rule 52    SIMPLE_VALUE -> WORD_VALUE
Rule 53    SIMPLE_VALUE -> FLOAT_VALUE
Rule 54    ANY_VALUE -> SIMPLE_VALUE
Rule 55    ANY_VALUE -> ID
Rule 56    ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
Rule 57    ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
Rule 58    ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
Rule 59    ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1
Rule 60    ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
Rule 61    ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
Rule 62    ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2
Rule 63    ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
Rule 64    ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
Rule 65    ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
Rule 66    ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
Rule 67    ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3
Rule 68    ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
Rule 69    ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
Rule 70    ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE
Rule 71    LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1
Rule 72    LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1
Rule 73    LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2
Rule 74    LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2
Rule 75    LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3
Rule 76    LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3
Rule 77    LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS
Rule 78    LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION
Rule 79    RELATIONAL_OPERATOR -> EQUAL_TO
Rule 80    RELATIONAL_OPERATOR -> DIFFERENT_TO
Rule 81    RELATIONAL_OPERATOR -> LESS_THAN
Rule 82    RELATIONAL_OPERATOR -> GREATER_THAN
Rule 83    RELATIONAL_OPERATOR -> LESS_OR_EQUAL_THAN
Rule 84    RELATIONAL_OPERATOR -> GREATER_OR_EQUAL_THAN

Terminals, with rules where they appear

AND                  : 74
AS                   : 3
CLOSE_BRACKET        : 11 12 13 24 25 25 26 26 26 42 56 57 57 58 58 58
CLOSE_PARENTHESIS    : 28 29 30 69 77
CLS                  : 27
COMMA                : 5 12 13 13 31 33
DIFFERENT_TO         : 80
DIM                  : 3
DIVIDE_FLOATING_POINT : 64
DIVIDE_ROUND_DOWN    : 66
DO                   : 40
DOUBLE_POINTS        : 16 19
ELSE                 : 36
ELSEIF               : 37
END                  : 1 35
EQUALS               : 20 21 22 23 28 29 41
EQUAL_TO             : 79
FLOAT                : 9 10
FLOAT_VALUE          : 53
FOR                  : 41
GOSUB                : 17
GOTO                 : 18
GREATER_OR_EQUAL_THAN : 84
GREATER_THAN         : 82
ID                   : 1 5 6 14 17 18 19 20 21 22 23 28 29 33 34 41 41 55 56 57 58
IF                   : 35 35
INPUT                : 28 29
LESS_OR_EQUAL_THAN   : 83
LESS_THAN            : 81
LET                  : 22 23 29
LOOP                 : 40
MAIN                 : 16
MINUS                : 61
MOD                  : 65
MULTIPLY             : 63
NEXT                 : 41
NOT                  : 76
OPEN_BRACKET         : 11 12 13 24 25 25 26 26 26 42 56 57 57 58 58 58
OPEN_PARENTHESIS     : 28 29 30 69 77
OR                   : 72
PLUS                 : 60
POWER_BY             : 68
PRINT                : 30
PROCEDURE            : 14
PROGRAM              : 1
RETURN               : 14
SINGLE_POINT         : 1
STRING               : 31 32
SUB                  : 14
THEN                 : 35 37
TO                   : 41
UNTIL                : 40
WEND                 : 39
WHILE                : 39
WORD                 : 7 8
WORD_VALUE           : 52
error                : 

Nonterminals, with rules where they appear

ANY_VALUE            : 70
ARITHMETIC_EXPRESSION : 20 21 22 23 24 25 25 26 26 26 41 41 56 57 57 58 58 58 60 61 69 78 78
ARITHMETIC_EXPRESSION_P1 : 59 60 61 63 64 65 66
ARITHMETIC_EXPRESSION_P2 : 62 63 64 65 66 68
ARITHMETIC_EXPRESSION_P3 : 67 68
DECLARATIONS         : 1
DIMENSIONAL_VAR_DECLARATION : 8 10
DIMENSIONAL_VAR_INDEX : 21 23
DO_STATEMENT         : 50
ELSE_STATEMENT       : 35 37
FOR_STATEMENT        : 49
IDS_SEQUENCE         : 3 5
IF_STATEMENT         : 47
JUMPERS              : 44
LOGICAL_EXPRESSION   : 35 37 39 40 72 77
LOGICAL_EXPRESSION_P1 : 71 72 74
LOGICAL_EXPRESSION_P2 : 73 74
LOGICAL_EXPRESSION_P3 : 75 76
MATHSCY              : 0
PROGRAM_BODY         : 1
RELATIONAL_OPERATOR  : 78
SET_FOR_STEPS        : 41
SIMPLE_VALUE         : 11 12 12 13 13 13 42 54
STATEMENTS           : 14 16 35 36 37 39 40 41 44 45 46 47 48 49 50
STRINGS_SEQUENCE     : 28 29 30 31 33
SUBPROCEDURES_DECLARATION : 2 14
USER_INTERACTION     : 46
VARIABLES_DECLARATION : 2 3
VARIABLE_ASSIGNATION : 45
VARIABLE_TYPE        : 3
WHILE_STATEMENT      : 48

Parsing method: LALR

state 0

    (0) S' -> . MATHSCY
    (1) MATHSCY -> . PROGRAM ID DECLARATIONS PROGRAM_BODY END SINGLE_POINT

    PROGRAM         shift and go to state 2

    MATHSCY                        shift and go to state 1

state 1

    (0) S' -> MATHSCY .



state 2

    (1) MATHSCY -> PROGRAM . ID DECLARATIONS PROGRAM_BODY END SINGLE_POINT

    ID              shift and go to state 3


state 3

    (1) MATHSCY -> PROGRAM ID . DECLARATIONS PROGRAM_BODY END SINGLE_POINT
    (2) DECLARATIONS -> . VARIABLES_DECLARATION SUBPROCEDURES_DECLARATION
    (3) VARIABLES_DECLARATION -> . DIM IDS_SEQUENCE AS VARIABLE_TYPE VARIABLES_DECLARATION
    (4) VARIABLES_DECLARATION -> .

    DIM             shift and go to state 6
    SUB             reduce using rule 4 (VARIABLES_DECLARATION -> .)
    MAIN            reduce using rule 4 (VARIABLES_DECLARATION -> .)

    DECLARATIONS                   shift and go to state 4
    VARIABLES_DECLARATION          shift and go to state 5

state 4

    (1) MATHSCY -> PROGRAM ID DECLARATIONS . PROGRAM_BODY END SINGLE_POINT
    (16) PROGRAM_BODY -> . MAIN DOUBLE_POINTS STATEMENTS

    MAIN            shift and go to state 8

    PROGRAM_BODY                   shift and go to state 7

state 5

    (2) DECLARATIONS -> VARIABLES_DECLARATION . SUBPROCEDURES_DECLARATION
    (14) SUBPROCEDURES_DECLARATION -> . SUB PROCEDURE ID STATEMENTS RETURN SUBPROCEDURES_DECLARATION
    (15) SUBPROCEDURES_DECLARATION -> .

    SUB             shift and go to state 10
    MAIN            reduce using rule 15 (SUBPROCEDURES_DECLARATION -> .)

    SUBPROCEDURES_DECLARATION      shift and go to state 9

state 6

    (3) VARIABLES_DECLARATION -> DIM . IDS_SEQUENCE AS VARIABLE_TYPE VARIABLES_DECLARATION
    (5) IDS_SEQUENCE -> . ID COMMA IDS_SEQUENCE
    (6) IDS_SEQUENCE -> . ID

    ID              shift and go to state 12

    IDS_SEQUENCE                   shift and go to state 11

state 7

    (1) MATHSCY -> PROGRAM ID DECLARATIONS PROGRAM_BODY . END SINGLE_POINT

    END             shift and go to state 13


state 8

    (16) PROGRAM_BODY -> MAIN . DOUBLE_POINTS STATEMENTS

    DOUBLE_POINTS   shift and go to state 14


state 9

    (2) DECLARATIONS -> VARIABLES_DECLARATION SUBPROCEDURES_DECLARATION .

    MAIN            reduce using rule 2 (DECLARATIONS -> VARIABLES_DECLARATION SUBPROCEDURES_DECLARATION .)


state 10

    (14) SUBPROCEDURES_DECLARATION -> SUB . PROCEDURE ID STATEMENTS RETURN SUBPROCEDURES_DECLARATION

    PROCEDURE       shift and go to state 15


state 11

    (3) VARIABLES_DECLARATION -> DIM IDS_SEQUENCE . AS VARIABLE_TYPE VARIABLES_DECLARATION

    AS              shift and go to state 16


state 12

    (5) IDS_SEQUENCE -> ID . COMMA IDS_SEQUENCE
    (6) IDS_SEQUENCE -> ID .

    COMMA           shift and go to state 17
    AS              reduce using rule 6 (IDS_SEQUENCE -> ID .)


state 13

    (1) MATHSCY -> PROGRAM ID DECLARATIONS PROGRAM_BODY END . SINGLE_POINT

    SINGLE_POINT    shift and go to state 18


state 14

    (16) PROGRAM_BODY -> MAIN DOUBLE_POINTS . STATEMENTS
    (44) STATEMENTS -> . JUMPERS STATEMENTS
    (45) STATEMENTS -> . VARIABLE_ASSIGNATION STATEMENTS
    (46) STATEMENTS -> . USER_INTERACTION STATEMENTS
    (47) STATEMENTS -> . IF_STATEMENT STATEMENTS
    (48) STATEMENTS -> . WHILE_STATEMENT STATEMENTS
    (49) STATEMENTS -> . FOR_STATEMENT STATEMENTS
    (50) STATEMENTS -> . DO_STATEMENT STATEMENTS
    (51) STATEMENTS -> .
    (17) JUMPERS -> . GOSUB ID
    (18) JUMPERS -> . GOTO ID
    (19) JUMPERS -> . ID DOUBLE_POINTS
    (20) VARIABLE_ASSIGNATION -> . ID EQUALS ARITHMETIC_EXPRESSION
    (21) VARIABLE_ASSIGNATION -> . ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (22) VARIABLE_ASSIGNATION -> . LET ID EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> . LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (27) USER_INTERACTION -> . CLS
    (28) USER_INTERACTION -> . ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (29) USER_INTERACTION -> . LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (30) USER_INTERACTION -> . PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (35) IF_STATEMENT -> . IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
    (39) WHILE_STATEMENT -> . WHILE LOGICAL_EXPRESSION STATEMENTS WEND
    (41) FOR_STATEMENT -> . FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (40) DO_STATEMENT -> . DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION

    END             reduce using rule 51 (STATEMENTS -> .)
    GOSUB           shift and go to state 27
    GOTO            shift and go to state 29
    ID              shift and go to state 28
    LET             shift and go to state 30
    CLS             shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36

    STATEMENTS                     shift and go to state 19
    JUMPERS                        shift and go to state 20
    VARIABLE_ASSIGNATION           shift and go to state 21
    USER_INTERACTION               shift and go to state 22
    IF_STATEMENT                   shift and go to state 23
    WHILE_STATEMENT                shift and go to state 24
    FOR_STATEMENT                  shift and go to state 25
    DO_STATEMENT                   shift and go to state 26

state 15

    (14) SUBPROCEDURES_DECLARATION -> SUB PROCEDURE . ID STATEMENTS RETURN SUBPROCEDURES_DECLARATION

    ID              shift and go to state 37


state 16

    (3) VARIABLES_DECLARATION -> DIM IDS_SEQUENCE AS . VARIABLE_TYPE VARIABLES_DECLARATION
    (7) VARIABLE_TYPE -> . WORD
    (8) VARIABLE_TYPE -> . WORD DIMENSIONAL_VAR_DECLARATION
    (9) VARIABLE_TYPE -> . FLOAT
    (10) VARIABLE_TYPE -> . FLOAT DIMENSIONAL_VAR_DECLARATION

    WORD            shift and go to state 39
    FLOAT           shift and go to state 40

    VARIABLE_TYPE                  shift and go to state 38

state 17

    (5) IDS_SEQUENCE -> ID COMMA . IDS_SEQUENCE
    (5) IDS_SEQUENCE -> . ID COMMA IDS_SEQUENCE
    (6) IDS_SEQUENCE -> . ID

    ID              shift and go to state 12

    IDS_SEQUENCE                   shift and go to state 41

state 18

    (1) MATHSCY -> PROGRAM ID DECLARATIONS PROGRAM_BODY END SINGLE_POINT .

    $end            reduce using rule 1 (MATHSCY -> PROGRAM ID DECLARATIONS PROGRAM_BODY END SINGLE_POINT .)


state 19

    (16) PROGRAM_BODY -> MAIN DOUBLE_POINTS STATEMENTS .

    END             reduce using rule 16 (PROGRAM_BODY -> MAIN DOUBLE_POINTS STATEMENTS .)


state 20

    (44) STATEMENTS -> JUMPERS . STATEMENTS
    (44) STATEMENTS -> . JUMPERS STATEMENTS
    (45) STATEMENTS -> . VARIABLE_ASSIGNATION STATEMENTS
    (46) STATEMENTS -> . USER_INTERACTION STATEMENTS
    (47) STATEMENTS -> . IF_STATEMENT STATEMENTS
    (48) STATEMENTS -> . WHILE_STATEMENT STATEMENTS
    (49) STATEMENTS -> . FOR_STATEMENT STATEMENTS
    (50) STATEMENTS -> . DO_STATEMENT STATEMENTS
    (51) STATEMENTS -> .
    (17) JUMPERS -> . GOSUB ID
    (18) JUMPERS -> . GOTO ID
    (19) JUMPERS -> . ID DOUBLE_POINTS
    (20) VARIABLE_ASSIGNATION -> . ID EQUALS ARITHMETIC_EXPRESSION
    (21) VARIABLE_ASSIGNATION -> . ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (22) VARIABLE_ASSIGNATION -> . LET ID EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> . LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (27) USER_INTERACTION -> . CLS
    (28) USER_INTERACTION -> . ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (29) USER_INTERACTION -> . LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (30) USER_INTERACTION -> . PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (35) IF_STATEMENT -> . IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
    (39) WHILE_STATEMENT -> . WHILE LOGICAL_EXPRESSION STATEMENTS WEND
    (41) FOR_STATEMENT -> . FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (40) DO_STATEMENT -> . DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION

    END             reduce using rule 51 (STATEMENTS -> .)
    LOOP            reduce using rule 51 (STATEMENTS -> .)
    RETURN          reduce using rule 51 (STATEMENTS -> .)
    WEND            reduce using rule 51 (STATEMENTS -> .)
    ELSE            reduce using rule 51 (STATEMENTS -> .)
    ELSEIF          reduce using rule 51 (STATEMENTS -> .)
    NEXT            reduce using rule 51 (STATEMENTS -> .)
    GOSUB           shift and go to state 27
    GOTO            shift and go to state 29
    ID              shift and go to state 28
    LET             shift and go to state 30
    CLS             shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36

    JUMPERS                        shift and go to state 20
    STATEMENTS                     shift and go to state 42
    VARIABLE_ASSIGNATION           shift and go to state 21
    USER_INTERACTION               shift and go to state 22
    IF_STATEMENT                   shift and go to state 23
    WHILE_STATEMENT                shift and go to state 24
    FOR_STATEMENT                  shift and go to state 25
    DO_STATEMENT                   shift and go to state 26

state 21

    (45) STATEMENTS -> VARIABLE_ASSIGNATION . STATEMENTS
    (44) STATEMENTS -> . JUMPERS STATEMENTS
    (45) STATEMENTS -> . VARIABLE_ASSIGNATION STATEMENTS
    (46) STATEMENTS -> . USER_INTERACTION STATEMENTS
    (47) STATEMENTS -> . IF_STATEMENT STATEMENTS
    (48) STATEMENTS -> . WHILE_STATEMENT STATEMENTS
    (49) STATEMENTS -> . FOR_STATEMENT STATEMENTS
    (50) STATEMENTS -> . DO_STATEMENT STATEMENTS
    (51) STATEMENTS -> .
    (17) JUMPERS -> . GOSUB ID
    (18) JUMPERS -> . GOTO ID
    (19) JUMPERS -> . ID DOUBLE_POINTS
    (20) VARIABLE_ASSIGNATION -> . ID EQUALS ARITHMETIC_EXPRESSION
    (21) VARIABLE_ASSIGNATION -> . ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (22) VARIABLE_ASSIGNATION -> . LET ID EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> . LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (27) USER_INTERACTION -> . CLS
    (28) USER_INTERACTION -> . ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (29) USER_INTERACTION -> . LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (30) USER_INTERACTION -> . PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (35) IF_STATEMENT -> . IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
    (39) WHILE_STATEMENT -> . WHILE LOGICAL_EXPRESSION STATEMENTS WEND
    (41) FOR_STATEMENT -> . FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (40) DO_STATEMENT -> . DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION

    END             reduce using rule 51 (STATEMENTS -> .)
    LOOP            reduce using rule 51 (STATEMENTS -> .)
    RETURN          reduce using rule 51 (STATEMENTS -> .)
    WEND            reduce using rule 51 (STATEMENTS -> .)
    ELSE            reduce using rule 51 (STATEMENTS -> .)
    ELSEIF          reduce using rule 51 (STATEMENTS -> .)
    NEXT            reduce using rule 51 (STATEMENTS -> .)
    GOSUB           shift and go to state 27
    GOTO            shift and go to state 29
    ID              shift and go to state 28
    LET             shift and go to state 30
    CLS             shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36

    VARIABLE_ASSIGNATION           shift and go to state 21
    STATEMENTS                     shift and go to state 43
    JUMPERS                        shift and go to state 20
    USER_INTERACTION               shift and go to state 22
    IF_STATEMENT                   shift and go to state 23
    WHILE_STATEMENT                shift and go to state 24
    FOR_STATEMENT                  shift and go to state 25
    DO_STATEMENT                   shift and go to state 26

state 22

    (46) STATEMENTS -> USER_INTERACTION . STATEMENTS
    (44) STATEMENTS -> . JUMPERS STATEMENTS
    (45) STATEMENTS -> . VARIABLE_ASSIGNATION STATEMENTS
    (46) STATEMENTS -> . USER_INTERACTION STATEMENTS
    (47) STATEMENTS -> . IF_STATEMENT STATEMENTS
    (48) STATEMENTS -> . WHILE_STATEMENT STATEMENTS
    (49) STATEMENTS -> . FOR_STATEMENT STATEMENTS
    (50) STATEMENTS -> . DO_STATEMENT STATEMENTS
    (51) STATEMENTS -> .
    (17) JUMPERS -> . GOSUB ID
    (18) JUMPERS -> . GOTO ID
    (19) JUMPERS -> . ID DOUBLE_POINTS
    (20) VARIABLE_ASSIGNATION -> . ID EQUALS ARITHMETIC_EXPRESSION
    (21) VARIABLE_ASSIGNATION -> . ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (22) VARIABLE_ASSIGNATION -> . LET ID EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> . LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (27) USER_INTERACTION -> . CLS
    (28) USER_INTERACTION -> . ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (29) USER_INTERACTION -> . LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (30) USER_INTERACTION -> . PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (35) IF_STATEMENT -> . IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
    (39) WHILE_STATEMENT -> . WHILE LOGICAL_EXPRESSION STATEMENTS WEND
    (41) FOR_STATEMENT -> . FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (40) DO_STATEMENT -> . DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION

    END             reduce using rule 51 (STATEMENTS -> .)
    LOOP            reduce using rule 51 (STATEMENTS -> .)
    RETURN          reduce using rule 51 (STATEMENTS -> .)
    WEND            reduce using rule 51 (STATEMENTS -> .)
    ELSE            reduce using rule 51 (STATEMENTS -> .)
    ELSEIF          reduce using rule 51 (STATEMENTS -> .)
    NEXT            reduce using rule 51 (STATEMENTS -> .)
    GOSUB           shift and go to state 27
    GOTO            shift and go to state 29
    ID              shift and go to state 28
    LET             shift and go to state 30
    CLS             shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36

    USER_INTERACTION               shift and go to state 22
    STATEMENTS                     shift and go to state 44
    JUMPERS                        shift and go to state 20
    VARIABLE_ASSIGNATION           shift and go to state 21
    IF_STATEMENT                   shift and go to state 23
    WHILE_STATEMENT                shift and go to state 24
    FOR_STATEMENT                  shift and go to state 25
    DO_STATEMENT                   shift and go to state 26

state 23

    (47) STATEMENTS -> IF_STATEMENT . STATEMENTS
    (44) STATEMENTS -> . JUMPERS STATEMENTS
    (45) STATEMENTS -> . VARIABLE_ASSIGNATION STATEMENTS
    (46) STATEMENTS -> . USER_INTERACTION STATEMENTS
    (47) STATEMENTS -> . IF_STATEMENT STATEMENTS
    (48) STATEMENTS -> . WHILE_STATEMENT STATEMENTS
    (49) STATEMENTS -> . FOR_STATEMENT STATEMENTS
    (50) STATEMENTS -> . DO_STATEMENT STATEMENTS
    (51) STATEMENTS -> .
    (17) JUMPERS -> . GOSUB ID
    (18) JUMPERS -> . GOTO ID
    (19) JUMPERS -> . ID DOUBLE_POINTS
    (20) VARIABLE_ASSIGNATION -> . ID EQUALS ARITHMETIC_EXPRESSION
    (21) VARIABLE_ASSIGNATION -> . ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (22) VARIABLE_ASSIGNATION -> . LET ID EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> . LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (27) USER_INTERACTION -> . CLS
    (28) USER_INTERACTION -> . ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (29) USER_INTERACTION -> . LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (30) USER_INTERACTION -> . PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (35) IF_STATEMENT -> . IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
    (39) WHILE_STATEMENT -> . WHILE LOGICAL_EXPRESSION STATEMENTS WEND
    (41) FOR_STATEMENT -> . FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (40) DO_STATEMENT -> . DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION

    END             reduce using rule 51 (STATEMENTS -> .)
    LOOP            reduce using rule 51 (STATEMENTS -> .)
    RETURN          reduce using rule 51 (STATEMENTS -> .)
    WEND            reduce using rule 51 (STATEMENTS -> .)
    ELSE            reduce using rule 51 (STATEMENTS -> .)
    ELSEIF          reduce using rule 51 (STATEMENTS -> .)
    NEXT            reduce using rule 51 (STATEMENTS -> .)
    GOSUB           shift and go to state 27
    GOTO            shift and go to state 29
    ID              shift and go to state 28
    LET             shift and go to state 30
    CLS             shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36

    IF_STATEMENT                   shift and go to state 23
    STATEMENTS                     shift and go to state 45
    JUMPERS                        shift and go to state 20
    VARIABLE_ASSIGNATION           shift and go to state 21
    USER_INTERACTION               shift and go to state 22
    WHILE_STATEMENT                shift and go to state 24
    FOR_STATEMENT                  shift and go to state 25
    DO_STATEMENT                   shift and go to state 26

state 24

    (48) STATEMENTS -> WHILE_STATEMENT . STATEMENTS
    (44) STATEMENTS -> . JUMPERS STATEMENTS
    (45) STATEMENTS -> . VARIABLE_ASSIGNATION STATEMENTS
    (46) STATEMENTS -> . USER_INTERACTION STATEMENTS
    (47) STATEMENTS -> . IF_STATEMENT STATEMENTS
    (48) STATEMENTS -> . WHILE_STATEMENT STATEMENTS
    (49) STATEMENTS -> . FOR_STATEMENT STATEMENTS
    (50) STATEMENTS -> . DO_STATEMENT STATEMENTS
    (51) STATEMENTS -> .
    (17) JUMPERS -> . GOSUB ID
    (18) JUMPERS -> . GOTO ID
    (19) JUMPERS -> . ID DOUBLE_POINTS
    (20) VARIABLE_ASSIGNATION -> . ID EQUALS ARITHMETIC_EXPRESSION
    (21) VARIABLE_ASSIGNATION -> . ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (22) VARIABLE_ASSIGNATION -> . LET ID EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> . LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (27) USER_INTERACTION -> . CLS
    (28) USER_INTERACTION -> . ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (29) USER_INTERACTION -> . LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (30) USER_INTERACTION -> . PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (35) IF_STATEMENT -> . IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
    (39) WHILE_STATEMENT -> . WHILE LOGICAL_EXPRESSION STATEMENTS WEND
    (41) FOR_STATEMENT -> . FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (40) DO_STATEMENT -> . DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION

    END             reduce using rule 51 (STATEMENTS -> .)
    LOOP            reduce using rule 51 (STATEMENTS -> .)
    RETURN          reduce using rule 51 (STATEMENTS -> .)
    WEND            reduce using rule 51 (STATEMENTS -> .)
    ELSE            reduce using rule 51 (STATEMENTS -> .)
    ELSEIF          reduce using rule 51 (STATEMENTS -> .)
    NEXT            reduce using rule 51 (STATEMENTS -> .)
    GOSUB           shift and go to state 27
    GOTO            shift and go to state 29
    ID              shift and go to state 28
    LET             shift and go to state 30
    CLS             shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36

    WHILE_STATEMENT                shift and go to state 24
    STATEMENTS                     shift and go to state 46
    JUMPERS                        shift and go to state 20
    VARIABLE_ASSIGNATION           shift and go to state 21
    USER_INTERACTION               shift and go to state 22
    IF_STATEMENT                   shift and go to state 23
    FOR_STATEMENT                  shift and go to state 25
    DO_STATEMENT                   shift and go to state 26

state 25

    (49) STATEMENTS -> FOR_STATEMENT . STATEMENTS
    (44) STATEMENTS -> . JUMPERS STATEMENTS
    (45) STATEMENTS -> . VARIABLE_ASSIGNATION STATEMENTS
    (46) STATEMENTS -> . USER_INTERACTION STATEMENTS
    (47) STATEMENTS -> . IF_STATEMENT STATEMENTS
    (48) STATEMENTS -> . WHILE_STATEMENT STATEMENTS
    (49) STATEMENTS -> . FOR_STATEMENT STATEMENTS
    (50) STATEMENTS -> . DO_STATEMENT STATEMENTS
    (51) STATEMENTS -> .
    (17) JUMPERS -> . GOSUB ID
    (18) JUMPERS -> . GOTO ID
    (19) JUMPERS -> . ID DOUBLE_POINTS
    (20) VARIABLE_ASSIGNATION -> . ID EQUALS ARITHMETIC_EXPRESSION
    (21) VARIABLE_ASSIGNATION -> . ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (22) VARIABLE_ASSIGNATION -> . LET ID EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> . LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (27) USER_INTERACTION -> . CLS
    (28) USER_INTERACTION -> . ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (29) USER_INTERACTION -> . LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (30) USER_INTERACTION -> . PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (35) IF_STATEMENT -> . IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
    (39) WHILE_STATEMENT -> . WHILE LOGICAL_EXPRESSION STATEMENTS WEND
    (41) FOR_STATEMENT -> . FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (40) DO_STATEMENT -> . DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION

    END             reduce using rule 51 (STATEMENTS -> .)
    LOOP            reduce using rule 51 (STATEMENTS -> .)
    RETURN          reduce using rule 51 (STATEMENTS -> .)
    WEND            reduce using rule 51 (STATEMENTS -> .)
    ELSE            reduce using rule 51 (STATEMENTS -> .)
    ELSEIF          reduce using rule 51 (STATEMENTS -> .)
    NEXT            reduce using rule 51 (STATEMENTS -> .)
    GOSUB           shift and go to state 27
    GOTO            shift and go to state 29
    ID              shift and go to state 28
    LET             shift and go to state 30
    CLS             shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36

    FOR_STATEMENT                  shift and go to state 25
    STATEMENTS                     shift and go to state 47
    JUMPERS                        shift and go to state 20
    VARIABLE_ASSIGNATION           shift and go to state 21
    USER_INTERACTION               shift and go to state 22
    IF_STATEMENT                   shift and go to state 23
    WHILE_STATEMENT                shift and go to state 24
    DO_STATEMENT                   shift and go to state 26

state 26

    (50) STATEMENTS -> DO_STATEMENT . STATEMENTS
    (44) STATEMENTS -> . JUMPERS STATEMENTS
    (45) STATEMENTS -> . VARIABLE_ASSIGNATION STATEMENTS
    (46) STATEMENTS -> . USER_INTERACTION STATEMENTS
    (47) STATEMENTS -> . IF_STATEMENT STATEMENTS
    (48) STATEMENTS -> . WHILE_STATEMENT STATEMENTS
    (49) STATEMENTS -> . FOR_STATEMENT STATEMENTS
    (50) STATEMENTS -> . DO_STATEMENT STATEMENTS
    (51) STATEMENTS -> .
    (17) JUMPERS -> . GOSUB ID
    (18) JUMPERS -> . GOTO ID
    (19) JUMPERS -> . ID DOUBLE_POINTS
    (20) VARIABLE_ASSIGNATION -> . ID EQUALS ARITHMETIC_EXPRESSION
    (21) VARIABLE_ASSIGNATION -> . ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (22) VARIABLE_ASSIGNATION -> . LET ID EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> . LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (27) USER_INTERACTION -> . CLS
    (28) USER_INTERACTION -> . ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (29) USER_INTERACTION -> . LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (30) USER_INTERACTION -> . PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (35) IF_STATEMENT -> . IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
    (39) WHILE_STATEMENT -> . WHILE LOGICAL_EXPRESSION STATEMENTS WEND
    (41) FOR_STATEMENT -> . FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (40) DO_STATEMENT -> . DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION

    END             reduce using rule 51 (STATEMENTS -> .)
    LOOP            reduce using rule 51 (STATEMENTS -> .)
    RETURN          reduce using rule 51 (STATEMENTS -> .)
    WEND            reduce using rule 51 (STATEMENTS -> .)
    ELSE            reduce using rule 51 (STATEMENTS -> .)
    ELSEIF          reduce using rule 51 (STATEMENTS -> .)
    NEXT            reduce using rule 51 (STATEMENTS -> .)
    GOSUB           shift and go to state 27
    GOTO            shift and go to state 29
    ID              shift and go to state 28
    LET             shift and go to state 30
    CLS             shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36

    DO_STATEMENT                   shift and go to state 26
    STATEMENTS                     shift and go to state 48
    JUMPERS                        shift and go to state 20
    VARIABLE_ASSIGNATION           shift and go to state 21
    USER_INTERACTION               shift and go to state 22
    IF_STATEMENT                   shift and go to state 23
    WHILE_STATEMENT                shift and go to state 24
    FOR_STATEMENT                  shift and go to state 25

state 27

    (17) JUMPERS -> GOSUB . ID

    ID              shift and go to state 49


state 28

    (19) JUMPERS -> ID . DOUBLE_POINTS
    (20) VARIABLE_ASSIGNATION -> ID . EQUALS ARITHMETIC_EXPRESSION
    (21) VARIABLE_ASSIGNATION -> ID . DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (28) USER_INTERACTION -> ID . EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (24) DIMENSIONAL_VAR_INDEX -> . OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (25) DIMENSIONAL_VAR_INDEX -> . OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (26) DIMENSIONAL_VAR_INDEX -> . OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET

    DOUBLE_POINTS   shift and go to state 50
    EQUALS          shift and go to state 51
    OPEN_BRACKET    shift and go to state 53

    DIMENSIONAL_VAR_INDEX          shift and go to state 52

state 29

    (18) JUMPERS -> GOTO . ID

    ID              shift and go to state 54


state 30

    (22) VARIABLE_ASSIGNATION -> LET . ID EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> LET . ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (29) USER_INTERACTION -> LET . ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS

    ID              shift and go to state 55


state 31

    (27) USER_INTERACTION -> CLS .

    GOSUB           reduce using rule 27 (USER_INTERACTION -> CLS .)
    GOTO            reduce using rule 27 (USER_INTERACTION -> CLS .)
    ID              reduce using rule 27 (USER_INTERACTION -> CLS .)
    LET             reduce using rule 27 (USER_INTERACTION -> CLS .)
    CLS             reduce using rule 27 (USER_INTERACTION -> CLS .)
    PRINT           reduce using rule 27 (USER_INTERACTION -> CLS .)
    IF              reduce using rule 27 (USER_INTERACTION -> CLS .)
    WHILE           reduce using rule 27 (USER_INTERACTION -> CLS .)
    FOR             reduce using rule 27 (USER_INTERACTION -> CLS .)
    DO              reduce using rule 27 (USER_INTERACTION -> CLS .)
    END             reduce using rule 27 (USER_INTERACTION -> CLS .)
    LOOP            reduce using rule 27 (USER_INTERACTION -> CLS .)
    RETURN          reduce using rule 27 (USER_INTERACTION -> CLS .)
    WEND            reduce using rule 27 (USER_INTERACTION -> CLS .)
    ELSE            reduce using rule 27 (USER_INTERACTION -> CLS .)
    ELSEIF          reduce using rule 27 (USER_INTERACTION -> CLS .)
    NEXT            reduce using rule 27 (USER_INTERACTION -> CLS .)


state 32

    (30) USER_INTERACTION -> PRINT . OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 56


state 33

    (35) IF_STATEMENT -> IF . LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
    (71) LOGICAL_EXPRESSION -> . LOGICAL_EXPRESSION_P1
    (72) LOGICAL_EXPRESSION -> . LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1
    (73) LOGICAL_EXPRESSION_P1 -> . LOGICAL_EXPRESSION_P2
    (74) LOGICAL_EXPRESSION_P1 -> . LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2
    (75) LOGICAL_EXPRESSION_P2 -> . LOGICAL_EXPRESSION_P3
    (76) LOGICAL_EXPRESSION_P2 -> . NOT LOGICAL_EXPRESSION_P3
    (77) LOGICAL_EXPRESSION_P3 -> . OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS
    (78) LOGICAL_EXPRESSION_P3 -> . ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    NOT             shift and go to state 61
    OPEN_PARENTHESIS shift and go to state 62
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    LOGICAL_EXPRESSION             shift and go to state 57
    LOGICAL_EXPRESSION_P1          shift and go to state 58
    LOGICAL_EXPRESSION_P2          shift and go to state 59
    LOGICAL_EXPRESSION_P3          shift and go to state 60
    ARITHMETIC_EXPRESSION          shift and go to state 63
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 34

    (39) WHILE_STATEMENT -> WHILE . LOGICAL_EXPRESSION STATEMENTS WEND
    (71) LOGICAL_EXPRESSION -> . LOGICAL_EXPRESSION_P1
    (72) LOGICAL_EXPRESSION -> . LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1
    (73) LOGICAL_EXPRESSION_P1 -> . LOGICAL_EXPRESSION_P2
    (74) LOGICAL_EXPRESSION_P1 -> . LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2
    (75) LOGICAL_EXPRESSION_P2 -> . LOGICAL_EXPRESSION_P3
    (76) LOGICAL_EXPRESSION_P2 -> . NOT LOGICAL_EXPRESSION_P3
    (77) LOGICAL_EXPRESSION_P3 -> . OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS
    (78) LOGICAL_EXPRESSION_P3 -> . ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    NOT             shift and go to state 61
    OPEN_PARENTHESIS shift and go to state 62
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    LOGICAL_EXPRESSION             shift and go to state 72
    LOGICAL_EXPRESSION_P1          shift and go to state 58
    LOGICAL_EXPRESSION_P2          shift and go to state 59
    LOGICAL_EXPRESSION_P3          shift and go to state 60
    ARITHMETIC_EXPRESSION          shift and go to state 63
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 35

    (41) FOR_STATEMENT -> FOR . ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID

    ID              shift and go to state 73


state 36

    (40) DO_STATEMENT -> DO . STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION
    (44) STATEMENTS -> . JUMPERS STATEMENTS
    (45) STATEMENTS -> . VARIABLE_ASSIGNATION STATEMENTS
    (46) STATEMENTS -> . USER_INTERACTION STATEMENTS
    (47) STATEMENTS -> . IF_STATEMENT STATEMENTS
    (48) STATEMENTS -> . WHILE_STATEMENT STATEMENTS
    (49) STATEMENTS -> . FOR_STATEMENT STATEMENTS
    (50) STATEMENTS -> . DO_STATEMENT STATEMENTS
    (51) STATEMENTS -> .
    (17) JUMPERS -> . GOSUB ID
    (18) JUMPERS -> . GOTO ID
    (19) JUMPERS -> . ID DOUBLE_POINTS
    (20) VARIABLE_ASSIGNATION -> . ID EQUALS ARITHMETIC_EXPRESSION
    (21) VARIABLE_ASSIGNATION -> . ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (22) VARIABLE_ASSIGNATION -> . LET ID EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> . LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (27) USER_INTERACTION -> . CLS
    (28) USER_INTERACTION -> . ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (29) USER_INTERACTION -> . LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (30) USER_INTERACTION -> . PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (35) IF_STATEMENT -> . IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
    (39) WHILE_STATEMENT -> . WHILE LOGICAL_EXPRESSION STATEMENTS WEND
    (41) FOR_STATEMENT -> . FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (40) DO_STATEMENT -> . DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION

    LOOP            reduce using rule 51 (STATEMENTS -> .)
    GOSUB           shift and go to state 27
    GOTO            shift and go to state 29
    ID              shift and go to state 28
    LET             shift and go to state 30
    CLS             shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36

    STATEMENTS                     shift and go to state 74
    JUMPERS                        shift and go to state 20
    VARIABLE_ASSIGNATION           shift and go to state 21
    USER_INTERACTION               shift and go to state 22
    IF_STATEMENT                   shift and go to state 23
    WHILE_STATEMENT                shift and go to state 24
    FOR_STATEMENT                  shift and go to state 25
    DO_STATEMENT                   shift and go to state 26

state 37

    (14) SUBPROCEDURES_DECLARATION -> SUB PROCEDURE ID . STATEMENTS RETURN SUBPROCEDURES_DECLARATION
    (44) STATEMENTS -> . JUMPERS STATEMENTS
    (45) STATEMENTS -> . VARIABLE_ASSIGNATION STATEMENTS
    (46) STATEMENTS -> . USER_INTERACTION STATEMENTS
    (47) STATEMENTS -> . IF_STATEMENT STATEMENTS
    (48) STATEMENTS -> . WHILE_STATEMENT STATEMENTS
    (49) STATEMENTS -> . FOR_STATEMENT STATEMENTS
    (50) STATEMENTS -> . DO_STATEMENT STATEMENTS
    (51) STATEMENTS -> .
    (17) JUMPERS -> . GOSUB ID
    (18) JUMPERS -> . GOTO ID
    (19) JUMPERS -> . ID DOUBLE_POINTS
    (20) VARIABLE_ASSIGNATION -> . ID EQUALS ARITHMETIC_EXPRESSION
    (21) VARIABLE_ASSIGNATION -> . ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (22) VARIABLE_ASSIGNATION -> . LET ID EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> . LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (27) USER_INTERACTION -> . CLS
    (28) USER_INTERACTION -> . ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (29) USER_INTERACTION -> . LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (30) USER_INTERACTION -> . PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (35) IF_STATEMENT -> . IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
    (39) WHILE_STATEMENT -> . WHILE LOGICAL_EXPRESSION STATEMENTS WEND
    (41) FOR_STATEMENT -> . FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (40) DO_STATEMENT -> . DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION

    RETURN          reduce using rule 51 (STATEMENTS -> .)
    GOSUB           shift and go to state 27
    GOTO            shift and go to state 29
    ID              shift and go to state 28
    LET             shift and go to state 30
    CLS             shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36

    STATEMENTS                     shift and go to state 75
    JUMPERS                        shift and go to state 20
    VARIABLE_ASSIGNATION           shift and go to state 21
    USER_INTERACTION               shift and go to state 22
    IF_STATEMENT                   shift and go to state 23
    WHILE_STATEMENT                shift and go to state 24
    FOR_STATEMENT                  shift and go to state 25
    DO_STATEMENT                   shift and go to state 26

state 38

    (3) VARIABLES_DECLARATION -> DIM IDS_SEQUENCE AS VARIABLE_TYPE . VARIABLES_DECLARATION
    (3) VARIABLES_DECLARATION -> . DIM IDS_SEQUENCE AS VARIABLE_TYPE VARIABLES_DECLARATION
    (4) VARIABLES_DECLARATION -> .

    DIM             shift and go to state 6
    SUB             reduce using rule 4 (VARIABLES_DECLARATION -> .)
    MAIN            reduce using rule 4 (VARIABLES_DECLARATION -> .)

    VARIABLES_DECLARATION          shift and go to state 76

state 39

    (7) VARIABLE_TYPE -> WORD .
    (8) VARIABLE_TYPE -> WORD . DIMENSIONAL_VAR_DECLARATION
    (11) DIMENSIONAL_VAR_DECLARATION -> . OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET
    (12) DIMENSIONAL_VAR_DECLARATION -> . OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET
    (13) DIMENSIONAL_VAR_DECLARATION -> . OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET

    DIM             reduce using rule 7 (VARIABLE_TYPE -> WORD .)
    SUB             reduce using rule 7 (VARIABLE_TYPE -> WORD .)
    MAIN            reduce using rule 7 (VARIABLE_TYPE -> WORD .)
    OPEN_BRACKET    shift and go to state 78

    DIMENSIONAL_VAR_DECLARATION    shift and go to state 77

state 40

    (9) VARIABLE_TYPE -> FLOAT .
    (10) VARIABLE_TYPE -> FLOAT . DIMENSIONAL_VAR_DECLARATION
    (11) DIMENSIONAL_VAR_DECLARATION -> . OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET
    (12) DIMENSIONAL_VAR_DECLARATION -> . OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET
    (13) DIMENSIONAL_VAR_DECLARATION -> . OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET

    DIM             reduce using rule 9 (VARIABLE_TYPE -> FLOAT .)
    SUB             reduce using rule 9 (VARIABLE_TYPE -> FLOAT .)
    MAIN            reduce using rule 9 (VARIABLE_TYPE -> FLOAT .)
    OPEN_BRACKET    shift and go to state 78

    DIMENSIONAL_VAR_DECLARATION    shift and go to state 79

state 41

    (5) IDS_SEQUENCE -> ID COMMA IDS_SEQUENCE .

    AS              reduce using rule 5 (IDS_SEQUENCE -> ID COMMA IDS_SEQUENCE .)


state 42

    (44) STATEMENTS -> JUMPERS STATEMENTS .

    END             reduce using rule 44 (STATEMENTS -> JUMPERS STATEMENTS .)
    LOOP            reduce using rule 44 (STATEMENTS -> JUMPERS STATEMENTS .)
    RETURN          reduce using rule 44 (STATEMENTS -> JUMPERS STATEMENTS .)
    WEND            reduce using rule 44 (STATEMENTS -> JUMPERS STATEMENTS .)
    ELSE            reduce using rule 44 (STATEMENTS -> JUMPERS STATEMENTS .)
    ELSEIF          reduce using rule 44 (STATEMENTS -> JUMPERS STATEMENTS .)
    NEXT            reduce using rule 44 (STATEMENTS -> JUMPERS STATEMENTS .)


state 43

    (45) STATEMENTS -> VARIABLE_ASSIGNATION STATEMENTS .

    END             reduce using rule 45 (STATEMENTS -> VARIABLE_ASSIGNATION STATEMENTS .)
    LOOP            reduce using rule 45 (STATEMENTS -> VARIABLE_ASSIGNATION STATEMENTS .)
    RETURN          reduce using rule 45 (STATEMENTS -> VARIABLE_ASSIGNATION STATEMENTS .)
    WEND            reduce using rule 45 (STATEMENTS -> VARIABLE_ASSIGNATION STATEMENTS .)
    ELSE            reduce using rule 45 (STATEMENTS -> VARIABLE_ASSIGNATION STATEMENTS .)
    ELSEIF          reduce using rule 45 (STATEMENTS -> VARIABLE_ASSIGNATION STATEMENTS .)
    NEXT            reduce using rule 45 (STATEMENTS -> VARIABLE_ASSIGNATION STATEMENTS .)


state 44

    (46) STATEMENTS -> USER_INTERACTION STATEMENTS .

    END             reduce using rule 46 (STATEMENTS -> USER_INTERACTION STATEMENTS .)
    LOOP            reduce using rule 46 (STATEMENTS -> USER_INTERACTION STATEMENTS .)
    RETURN          reduce using rule 46 (STATEMENTS -> USER_INTERACTION STATEMENTS .)
    WEND            reduce using rule 46 (STATEMENTS -> USER_INTERACTION STATEMENTS .)
    ELSE            reduce using rule 46 (STATEMENTS -> USER_INTERACTION STATEMENTS .)
    ELSEIF          reduce using rule 46 (STATEMENTS -> USER_INTERACTION STATEMENTS .)
    NEXT            reduce using rule 46 (STATEMENTS -> USER_INTERACTION STATEMENTS .)


state 45

    (47) STATEMENTS -> IF_STATEMENT STATEMENTS .

    END             reduce using rule 47 (STATEMENTS -> IF_STATEMENT STATEMENTS .)
    LOOP            reduce using rule 47 (STATEMENTS -> IF_STATEMENT STATEMENTS .)
    RETURN          reduce using rule 47 (STATEMENTS -> IF_STATEMENT STATEMENTS .)
    WEND            reduce using rule 47 (STATEMENTS -> IF_STATEMENT STATEMENTS .)
    ELSE            reduce using rule 47 (STATEMENTS -> IF_STATEMENT STATEMENTS .)
    ELSEIF          reduce using rule 47 (STATEMENTS -> IF_STATEMENT STATEMENTS .)
    NEXT            reduce using rule 47 (STATEMENTS -> IF_STATEMENT STATEMENTS .)


state 46

    (48) STATEMENTS -> WHILE_STATEMENT STATEMENTS .

    END             reduce using rule 48 (STATEMENTS -> WHILE_STATEMENT STATEMENTS .)
    LOOP            reduce using rule 48 (STATEMENTS -> WHILE_STATEMENT STATEMENTS .)
    RETURN          reduce using rule 48 (STATEMENTS -> WHILE_STATEMENT STATEMENTS .)
    WEND            reduce using rule 48 (STATEMENTS -> WHILE_STATEMENT STATEMENTS .)
    ELSE            reduce using rule 48 (STATEMENTS -> WHILE_STATEMENT STATEMENTS .)
    ELSEIF          reduce using rule 48 (STATEMENTS -> WHILE_STATEMENT STATEMENTS .)
    NEXT            reduce using rule 48 (STATEMENTS -> WHILE_STATEMENT STATEMENTS .)


state 47

    (49) STATEMENTS -> FOR_STATEMENT STATEMENTS .

    END             reduce using rule 49 (STATEMENTS -> FOR_STATEMENT STATEMENTS .)
    LOOP            reduce using rule 49 (STATEMENTS -> FOR_STATEMENT STATEMENTS .)
    RETURN          reduce using rule 49 (STATEMENTS -> FOR_STATEMENT STATEMENTS .)
    WEND            reduce using rule 49 (STATEMENTS -> FOR_STATEMENT STATEMENTS .)
    ELSE            reduce using rule 49 (STATEMENTS -> FOR_STATEMENT STATEMENTS .)
    ELSEIF          reduce using rule 49 (STATEMENTS -> FOR_STATEMENT STATEMENTS .)
    NEXT            reduce using rule 49 (STATEMENTS -> FOR_STATEMENT STATEMENTS .)


state 48

    (50) STATEMENTS -> DO_STATEMENT STATEMENTS .

    END             reduce using rule 50 (STATEMENTS -> DO_STATEMENT STATEMENTS .)
    LOOP            reduce using rule 50 (STATEMENTS -> DO_STATEMENT STATEMENTS .)
    RETURN          reduce using rule 50 (STATEMENTS -> DO_STATEMENT STATEMENTS .)
    WEND            reduce using rule 50 (STATEMENTS -> DO_STATEMENT STATEMENTS .)
    ELSE            reduce using rule 50 (STATEMENTS -> DO_STATEMENT STATEMENTS .)
    ELSEIF          reduce using rule 50 (STATEMENTS -> DO_STATEMENT STATEMENTS .)
    NEXT            reduce using rule 50 (STATEMENTS -> DO_STATEMENT STATEMENTS .)


state 49

    (17) JUMPERS -> GOSUB ID .

    GOSUB           reduce using rule 17 (JUMPERS -> GOSUB ID .)
    GOTO            reduce using rule 17 (JUMPERS -> GOSUB ID .)
    ID              reduce using rule 17 (JUMPERS -> GOSUB ID .)
    LET             reduce using rule 17 (JUMPERS -> GOSUB ID .)
    CLS             reduce using rule 17 (JUMPERS -> GOSUB ID .)
    PRINT           reduce using rule 17 (JUMPERS -> GOSUB ID .)
    IF              reduce using rule 17 (JUMPERS -> GOSUB ID .)
    WHILE           reduce using rule 17 (JUMPERS -> GOSUB ID .)
    FOR             reduce using rule 17 (JUMPERS -> GOSUB ID .)
    DO              reduce using rule 17 (JUMPERS -> GOSUB ID .)
    END             reduce using rule 17 (JUMPERS -> GOSUB ID .)
    LOOP            reduce using rule 17 (JUMPERS -> GOSUB ID .)
    RETURN          reduce using rule 17 (JUMPERS -> GOSUB ID .)
    WEND            reduce using rule 17 (JUMPERS -> GOSUB ID .)
    ELSE            reduce using rule 17 (JUMPERS -> GOSUB ID .)
    ELSEIF          reduce using rule 17 (JUMPERS -> GOSUB ID .)
    NEXT            reduce using rule 17 (JUMPERS -> GOSUB ID .)


state 50

    (19) JUMPERS -> ID DOUBLE_POINTS .

    GOSUB           reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)
    GOTO            reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)
    ID              reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)
    LET             reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)
    CLS             reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)
    PRINT           reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)
    IF              reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)
    WHILE           reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)
    FOR             reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)
    DO              reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)
    END             reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)
    LOOP            reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)
    RETURN          reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)
    WEND            reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)
    ELSE            reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)
    ELSEIF          reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)
    NEXT            reduce using rule 19 (JUMPERS -> ID DOUBLE_POINTS .)


state 51

    (20) VARIABLE_ASSIGNATION -> ID EQUALS . ARITHMETIC_EXPRESSION
    (28) USER_INTERACTION -> ID EQUALS . INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    INPUT           shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION          shift and go to state 80
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 52

    (21) VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX . EQUALS ARITHMETIC_EXPRESSION

    EQUALS          shift and go to state 83


state 53

    (24) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET . ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (25) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET . ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (26) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET . ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION          shift and go to state 84
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 54

    (18) JUMPERS -> GOTO ID .

    GOSUB           reduce using rule 18 (JUMPERS -> GOTO ID .)
    GOTO            reduce using rule 18 (JUMPERS -> GOTO ID .)
    ID              reduce using rule 18 (JUMPERS -> GOTO ID .)
    LET             reduce using rule 18 (JUMPERS -> GOTO ID .)
    CLS             reduce using rule 18 (JUMPERS -> GOTO ID .)
    PRINT           reduce using rule 18 (JUMPERS -> GOTO ID .)
    IF              reduce using rule 18 (JUMPERS -> GOTO ID .)
    WHILE           reduce using rule 18 (JUMPERS -> GOTO ID .)
    FOR             reduce using rule 18 (JUMPERS -> GOTO ID .)
    DO              reduce using rule 18 (JUMPERS -> GOTO ID .)
    END             reduce using rule 18 (JUMPERS -> GOTO ID .)
    LOOP            reduce using rule 18 (JUMPERS -> GOTO ID .)
    RETURN          reduce using rule 18 (JUMPERS -> GOTO ID .)
    WEND            reduce using rule 18 (JUMPERS -> GOTO ID .)
    ELSE            reduce using rule 18 (JUMPERS -> GOTO ID .)
    ELSEIF          reduce using rule 18 (JUMPERS -> GOTO ID .)
    NEXT            reduce using rule 18 (JUMPERS -> GOTO ID .)


state 55

    (22) VARIABLE_ASSIGNATION -> LET ID . EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> LET ID . DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (29) USER_INTERACTION -> LET ID . EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (24) DIMENSIONAL_VAR_INDEX -> . OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (25) DIMENSIONAL_VAR_INDEX -> . OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (26) DIMENSIONAL_VAR_INDEX -> . OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET

    EQUALS          shift and go to state 85
    OPEN_BRACKET    shift and go to state 53

    DIMENSIONAL_VAR_INDEX          shift and go to state 86

state 56

    (30) USER_INTERACTION -> PRINT OPEN_PARENTHESIS . STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (31) STRINGS_SEQUENCE -> . STRING COMMA STRINGS_SEQUENCE
    (32) STRINGS_SEQUENCE -> . STRING
    (33) STRINGS_SEQUENCE -> . ID COMMA STRINGS_SEQUENCE
    (34) STRINGS_SEQUENCE -> . ID

    STRING          shift and go to state 88
    ID              shift and go to state 89

    STRINGS_SEQUENCE               shift and go to state 87

state 57

    (35) IF_STATEMENT -> IF LOGICAL_EXPRESSION . THEN STATEMENTS ELSE_STATEMENT END IF
    (72) LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION . OR LOGICAL_EXPRESSION_P1

    THEN            shift and go to state 90
    OR              shift and go to state 91


state 58

    (71) LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .
    (74) LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 . AND LOGICAL_EXPRESSION_P2

    THEN            reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    OR              reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    GOSUB           reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    GOTO            reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    ID              reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    LET             reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    CLS             reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    PRINT           reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    IF              reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    WHILE           reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    FOR             reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    DO              reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    WEND            reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    CLOSE_PARENTHESIS reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    END             reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    LOOP            reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    RETURN          reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    ELSE            reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    ELSEIF          reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    NEXT            reduce using rule 71 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION_P1 .)
    AND             shift and go to state 92


state 59

    (73) LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .

    AND             reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    THEN            reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    OR              reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    GOSUB           reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    GOTO            reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    ID              reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    LET             reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    CLS             reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    PRINT           reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    IF              reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    WHILE           reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    FOR             reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    DO              reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    WEND            reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    CLOSE_PARENTHESIS reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    END             reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    LOOP            reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    RETURN          reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    ELSE            reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    ELSEIF          reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)
    NEXT            reduce using rule 73 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P2 .)


state 60

    (75) LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .

    AND             reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    THEN            reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    OR              reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    GOSUB           reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    GOTO            reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    ID              reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    LET             reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    CLS             reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    PRINT           reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    IF              reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    WHILE           reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    FOR             reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    DO              reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    WEND            reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    CLOSE_PARENTHESIS reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    END             reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    LOOP            reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    RETURN          reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    ELSE            reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    ELSEIF          reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)
    NEXT            reduce using rule 75 (LOGICAL_EXPRESSION_P2 -> LOGICAL_EXPRESSION_P3 .)


state 61

    (76) LOGICAL_EXPRESSION_P2 -> NOT . LOGICAL_EXPRESSION_P3
    (77) LOGICAL_EXPRESSION_P3 -> . OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS
    (78) LOGICAL_EXPRESSION_P3 -> . ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 62
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    LOGICAL_EXPRESSION_P3          shift and go to state 93
    ARITHMETIC_EXPRESSION          shift and go to state 63
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 62

    (77) LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS . LOGICAL_EXPRESSION CLOSE_PARENTHESIS
    (69) ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS . ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (71) LOGICAL_EXPRESSION -> . LOGICAL_EXPRESSION_P1
    (72) LOGICAL_EXPRESSION -> . LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (73) LOGICAL_EXPRESSION_P1 -> . LOGICAL_EXPRESSION_P2
    (74) LOGICAL_EXPRESSION_P1 -> . LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (75) LOGICAL_EXPRESSION_P2 -> . LOGICAL_EXPRESSION_P3
    (76) LOGICAL_EXPRESSION_P2 -> . NOT LOGICAL_EXPRESSION_P3
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (77) LOGICAL_EXPRESSION_P3 -> . OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS
    (78) LOGICAL_EXPRESSION_P3 -> . ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    NOT             shift and go to state 61
    OPEN_PARENTHESIS shift and go to state 62
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    LOGICAL_EXPRESSION             shift and go to state 94
    ARITHMETIC_EXPRESSION          shift and go to state 95
    LOGICAL_EXPRESSION_P1          shift and go to state 58
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    LOGICAL_EXPRESSION_P2          shift and go to state 59
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    LOGICAL_EXPRESSION_P3          shift and go to state 60
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 63

    (78) LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION . RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION
    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . MINUS ARITHMETIC_EXPRESSION_P1
    (79) RELATIONAL_OPERATOR -> . EQUAL_TO
    (80) RELATIONAL_OPERATOR -> . DIFFERENT_TO
    (81) RELATIONAL_OPERATOR -> . LESS_THAN
    (82) RELATIONAL_OPERATOR -> . GREATER_THAN
    (83) RELATIONAL_OPERATOR -> . LESS_OR_EQUAL_THAN
    (84) RELATIONAL_OPERATOR -> . GREATER_OR_EQUAL_THAN

    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    EQUAL_TO        shift and go to state 99
    DIFFERENT_TO    shift and go to state 100
    LESS_THAN       shift and go to state 101
    GREATER_THAN    shift and go to state 102
    LESS_OR_EQUAL_THAN shift and go to state 103
    GREATER_OR_EQUAL_THAN shift and go to state 104

    RELATIONAL_OPERATOR            shift and go to state 96

state 64

    (59) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .
    (63) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 . MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 . DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 . MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 . DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2

    PLUS            reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    MINUS           reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    EQUAL_TO        reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    DIFFERENT_TO    reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    LESS_THAN       reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    GREATER_THAN    reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    LESS_OR_EQUAL_THAN reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    GREATER_OR_EQUAL_THAN reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    GOSUB           reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    GOTO            reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    ID              reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    LET             reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    CLS             reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    PRINT           reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    IF              reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    WHILE           reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    FOR             reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    DO              reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    END             reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    LOOP            reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    RETURN          reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    WEND            reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    ELSE            reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    ELSEIF          reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    NEXT            reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    CLOSE_BRACKET   reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    CLOSE_PARENTHESIS reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    AND             reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    THEN            reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    OR              reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    TO              reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    OPEN_BRACKET    reduce using rule 59 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION_P1 .)
    MULTIPLY        shift and go to state 105
    DIVIDE_FLOATING_POINT shift and go to state 106
    MOD             shift and go to state 107
    DIVIDE_ROUND_DOWN shift and go to state 108


state 65

    (62) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .
    (68) ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 . POWER_BY ARITHMETIC_EXPRESSION_P3

    MULTIPLY        reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    DIVIDE_FLOATING_POINT reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    MOD             reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    DIVIDE_ROUND_DOWN reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    PLUS            reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    MINUS           reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    EQUAL_TO        reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    DIFFERENT_TO    reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    LESS_THAN       reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    GREATER_THAN    reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    LESS_OR_EQUAL_THAN reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    GREATER_OR_EQUAL_THAN reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    GOSUB           reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    GOTO            reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    ID              reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    LET             reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    CLS             reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    PRINT           reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    IF              reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    WHILE           reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    FOR             reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    DO              reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    END             reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    LOOP            reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    RETURN          reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    WEND            reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    ELSE            reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    ELSEIF          reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    NEXT            reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    CLOSE_BRACKET   reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    CLOSE_PARENTHESIS reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    AND             reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    THEN            reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    OR              reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    TO              reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    OPEN_BRACKET    reduce using rule 62 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P2 .)
    POWER_BY        shift and go to state 109


state 66

    (67) ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .

    POWER_BY        reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    MULTIPLY        reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    DIVIDE_FLOATING_POINT reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    MOD             reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    DIVIDE_ROUND_DOWN reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    PLUS            reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    MINUS           reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    EQUAL_TO        reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    DIFFERENT_TO    reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    LESS_THAN       reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    GREATER_THAN    reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    LESS_OR_EQUAL_THAN reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    GREATER_OR_EQUAL_THAN reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    GOSUB           reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    GOTO            reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    ID              reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    LET             reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    CLS             reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    PRINT           reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    IF              reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    WHILE           reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    FOR             reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    DO              reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    END             reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    LOOP            reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    RETURN          reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    WEND            reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    ELSE            reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    ELSEIF          reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    NEXT            reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    CLOSE_BRACKET   reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    CLOSE_PARENTHESIS reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    AND             reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    THEN            reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    OR              reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    TO              reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)
    OPEN_BRACKET    reduce using rule 67 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P3 .)


state 67

    (70) ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .

    POWER_BY        reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    MULTIPLY        reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    DIVIDE_FLOATING_POINT reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    MOD             reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    DIVIDE_ROUND_DOWN reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    PLUS            reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    MINUS           reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    EQUAL_TO        reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    DIFFERENT_TO    reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    LESS_THAN       reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    GREATER_THAN    reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    LESS_OR_EQUAL_THAN reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    GREATER_OR_EQUAL_THAN reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    GOSUB           reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    GOTO            reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    ID              reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    LET             reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    CLS             reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    PRINT           reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    IF              reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    WHILE           reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    FOR             reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    DO              reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    END             reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    LOOP            reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    RETURN          reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    WEND            reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    ELSE            reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    ELSEIF          reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    NEXT            reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    CLOSE_BRACKET   reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    CLOSE_PARENTHESIS reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    AND             reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    THEN            reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    OR              reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    TO              reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)
    OPEN_BRACKET    reduce using rule 70 (ARITHMETIC_EXPRESSION_P3 -> ANY_VALUE .)


state 68

    (54) ANY_VALUE -> SIMPLE_VALUE .

    POWER_BY        reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    MULTIPLY        reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    DIVIDE_FLOATING_POINT reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    MOD             reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    DIVIDE_ROUND_DOWN reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    PLUS            reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    MINUS           reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    EQUAL_TO        reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    DIFFERENT_TO    reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    LESS_THAN       reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    GREATER_THAN    reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    LESS_OR_EQUAL_THAN reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    GREATER_OR_EQUAL_THAN reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    GOSUB           reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    GOTO            reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    ID              reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    LET             reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    CLS             reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    PRINT           reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    IF              reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    WHILE           reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    FOR             reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    DO              reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    END             reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    LOOP            reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    RETURN          reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    WEND            reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    ELSE            reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    ELSEIF          reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    NEXT            reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    CLOSE_BRACKET   reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    CLOSE_PARENTHESIS reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    AND             reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    THEN            reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    OR              reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    TO              reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)
    OPEN_BRACKET    reduce using rule 54 (ANY_VALUE -> SIMPLE_VALUE .)


state 69

    (55) ANY_VALUE -> ID .
    (56) ANY_VALUE -> ID . OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> ID . OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> ID . OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    POWER_BY        reduce using rule 55 (ANY_VALUE -> ID .)
    MULTIPLY        reduce using rule 55 (ANY_VALUE -> ID .)
    DIVIDE_FLOATING_POINT reduce using rule 55 (ANY_VALUE -> ID .)
    MOD             reduce using rule 55 (ANY_VALUE -> ID .)
    DIVIDE_ROUND_DOWN reduce using rule 55 (ANY_VALUE -> ID .)
    PLUS            reduce using rule 55 (ANY_VALUE -> ID .)
    MINUS           reduce using rule 55 (ANY_VALUE -> ID .)
    EQUAL_TO        reduce using rule 55 (ANY_VALUE -> ID .)
    DIFFERENT_TO    reduce using rule 55 (ANY_VALUE -> ID .)
    LESS_THAN       reduce using rule 55 (ANY_VALUE -> ID .)
    GREATER_THAN    reduce using rule 55 (ANY_VALUE -> ID .)
    LESS_OR_EQUAL_THAN reduce using rule 55 (ANY_VALUE -> ID .)
    GREATER_OR_EQUAL_THAN reduce using rule 55 (ANY_VALUE -> ID .)
    GOSUB           reduce using rule 55 (ANY_VALUE -> ID .)
    GOTO            reduce using rule 55 (ANY_VALUE -> ID .)
    ID              reduce using rule 55 (ANY_VALUE -> ID .)
    LET             reduce using rule 55 (ANY_VALUE -> ID .)
    CLS             reduce using rule 55 (ANY_VALUE -> ID .)
    PRINT           reduce using rule 55 (ANY_VALUE -> ID .)
    IF              reduce using rule 55 (ANY_VALUE -> ID .)
    WHILE           reduce using rule 55 (ANY_VALUE -> ID .)
    FOR             reduce using rule 55 (ANY_VALUE -> ID .)
    DO              reduce using rule 55 (ANY_VALUE -> ID .)
    END             reduce using rule 55 (ANY_VALUE -> ID .)
    LOOP            reduce using rule 55 (ANY_VALUE -> ID .)
    RETURN          reduce using rule 55 (ANY_VALUE -> ID .)
    WEND            reduce using rule 55 (ANY_VALUE -> ID .)
    ELSE            reduce using rule 55 (ANY_VALUE -> ID .)
    ELSEIF          reduce using rule 55 (ANY_VALUE -> ID .)
    NEXT            reduce using rule 55 (ANY_VALUE -> ID .)
    CLOSE_BRACKET   reduce using rule 55 (ANY_VALUE -> ID .)
    CLOSE_PARENTHESIS reduce using rule 55 (ANY_VALUE -> ID .)
    AND             reduce using rule 55 (ANY_VALUE -> ID .)
    THEN            reduce using rule 55 (ANY_VALUE -> ID .)
    OR              reduce using rule 55 (ANY_VALUE -> ID .)
    TO              reduce using rule 55 (ANY_VALUE -> ID .)
    OPEN_BRACKET    shift and go to state 110

  ! OPEN_BRACKET    [ reduce using rule 55 (ANY_VALUE -> ID .) ]


state 70

    (52) SIMPLE_VALUE -> WORD_VALUE .

    POWER_BY        reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    MULTIPLY        reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    DIVIDE_FLOATING_POINT reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    MOD             reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    DIVIDE_ROUND_DOWN reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    PLUS            reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    MINUS           reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    EQUAL_TO        reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    DIFFERENT_TO    reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    LESS_THAN       reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    GREATER_THAN    reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    LESS_OR_EQUAL_THAN reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    GREATER_OR_EQUAL_THAN reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    GOSUB           reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    GOTO            reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    ID              reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    LET             reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    CLS             reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    PRINT           reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    IF              reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    WHILE           reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    FOR             reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    DO              reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    END             reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    LOOP            reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    RETURN          reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    WEND            reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    ELSE            reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    ELSEIF          reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    NEXT            reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    CLOSE_BRACKET   reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    CLOSE_PARENTHESIS reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    COMMA           reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    AND             reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    THEN            reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    OR              reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    TO              reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)
    OPEN_BRACKET    reduce using rule 52 (SIMPLE_VALUE -> WORD_VALUE .)


state 71

    (53) SIMPLE_VALUE -> FLOAT_VALUE .

    POWER_BY        reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    MULTIPLY        reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    DIVIDE_FLOATING_POINT reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    MOD             reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    DIVIDE_ROUND_DOWN reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    PLUS            reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    MINUS           reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    EQUAL_TO        reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    DIFFERENT_TO    reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    LESS_THAN       reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    GREATER_THAN    reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    LESS_OR_EQUAL_THAN reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    GREATER_OR_EQUAL_THAN reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    GOSUB           reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    GOTO            reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    ID              reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    LET             reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    CLS             reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    PRINT           reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    IF              reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    WHILE           reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    FOR             reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    DO              reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    END             reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    LOOP            reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    RETURN          reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    WEND            reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    ELSE            reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    ELSEIF          reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    NEXT            reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    CLOSE_BRACKET   reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    CLOSE_PARENTHESIS reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    COMMA           reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    AND             reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    THEN            reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    OR              reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    TO              reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)
    OPEN_BRACKET    reduce using rule 53 (SIMPLE_VALUE -> FLOAT_VALUE .)


state 72

    (39) WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION . STATEMENTS WEND
    (72) LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION . OR LOGICAL_EXPRESSION_P1
    (44) STATEMENTS -> . JUMPERS STATEMENTS
    (45) STATEMENTS -> . VARIABLE_ASSIGNATION STATEMENTS
    (46) STATEMENTS -> . USER_INTERACTION STATEMENTS
    (47) STATEMENTS -> . IF_STATEMENT STATEMENTS
    (48) STATEMENTS -> . WHILE_STATEMENT STATEMENTS
    (49) STATEMENTS -> . FOR_STATEMENT STATEMENTS
    (50) STATEMENTS -> . DO_STATEMENT STATEMENTS
    (51) STATEMENTS -> .
    (17) JUMPERS -> . GOSUB ID
    (18) JUMPERS -> . GOTO ID
    (19) JUMPERS -> . ID DOUBLE_POINTS
    (20) VARIABLE_ASSIGNATION -> . ID EQUALS ARITHMETIC_EXPRESSION
    (21) VARIABLE_ASSIGNATION -> . ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (22) VARIABLE_ASSIGNATION -> . LET ID EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> . LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (27) USER_INTERACTION -> . CLS
    (28) USER_INTERACTION -> . ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (29) USER_INTERACTION -> . LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (30) USER_INTERACTION -> . PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (35) IF_STATEMENT -> . IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
    (39) WHILE_STATEMENT -> . WHILE LOGICAL_EXPRESSION STATEMENTS WEND
    (41) FOR_STATEMENT -> . FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (40) DO_STATEMENT -> . DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION

    OR              shift and go to state 91
    WEND            reduce using rule 51 (STATEMENTS -> .)
    GOSUB           shift and go to state 27
    GOTO            shift and go to state 29
    ID              shift and go to state 28
    LET             shift and go to state 30
    CLS             shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36

    STATEMENTS                     shift and go to state 111
    JUMPERS                        shift and go to state 20
    VARIABLE_ASSIGNATION           shift and go to state 21
    USER_INTERACTION               shift and go to state 22
    IF_STATEMENT                   shift and go to state 23
    WHILE_STATEMENT                shift and go to state 24
    FOR_STATEMENT                  shift and go to state 25
    DO_STATEMENT                   shift and go to state 26

state 73

    (41) FOR_STATEMENT -> FOR ID . EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID

    EQUALS          shift and go to state 112


state 74

    (40) DO_STATEMENT -> DO STATEMENTS . LOOP UNTIL LOGICAL_EXPRESSION

    LOOP            shift and go to state 113


state 75

    (14) SUBPROCEDURES_DECLARATION -> SUB PROCEDURE ID STATEMENTS . RETURN SUBPROCEDURES_DECLARATION

    RETURN          shift and go to state 114


state 76

    (3) VARIABLES_DECLARATION -> DIM IDS_SEQUENCE AS VARIABLE_TYPE VARIABLES_DECLARATION .

    SUB             reduce using rule 3 (VARIABLES_DECLARATION -> DIM IDS_SEQUENCE AS VARIABLE_TYPE VARIABLES_DECLARATION .)
    MAIN            reduce using rule 3 (VARIABLES_DECLARATION -> DIM IDS_SEQUENCE AS VARIABLE_TYPE VARIABLES_DECLARATION .)


state 77

    (8) VARIABLE_TYPE -> WORD DIMENSIONAL_VAR_DECLARATION .

    DIM             reduce using rule 8 (VARIABLE_TYPE -> WORD DIMENSIONAL_VAR_DECLARATION .)
    SUB             reduce using rule 8 (VARIABLE_TYPE -> WORD DIMENSIONAL_VAR_DECLARATION .)
    MAIN            reduce using rule 8 (VARIABLE_TYPE -> WORD DIMENSIONAL_VAR_DECLARATION .)


state 78

    (11) DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET . SIMPLE_VALUE CLOSE_BRACKET
    (12) DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET . SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET
    (13) DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET . SIMPLE_VALUE COMMA SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    SIMPLE_VALUE                   shift and go to state 115

state 79

    (10) VARIABLE_TYPE -> FLOAT DIMENSIONAL_VAR_DECLARATION .

    DIM             reduce using rule 10 (VARIABLE_TYPE -> FLOAT DIMENSIONAL_VAR_DECLARATION .)
    SUB             reduce using rule 10 (VARIABLE_TYPE -> FLOAT DIMENSIONAL_VAR_DECLARATION .)
    MAIN            reduce using rule 10 (VARIABLE_TYPE -> FLOAT DIMENSIONAL_VAR_DECLARATION .)


state 80

    (20) VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .
    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . MINUS ARITHMETIC_EXPRESSION_P1

    GOSUB           reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    GOTO            reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    ID              reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    LET             reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    CLS             reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    PRINT           reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    IF              reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    WHILE           reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    FOR             reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    DO              reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    END             reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    LOOP            reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    RETURN          reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    WEND            reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    ELSE            reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    ELSEIF          reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    NEXT            reduce using rule 20 (VARIABLE_ASSIGNATION -> ID EQUALS ARITHMETIC_EXPRESSION .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98


state 81

    (28) USER_INTERACTION -> ID EQUALS INPUT . OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 116


state 82

    (69) ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS . ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION          shift and go to state 117
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 83

    (21) VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS . ARITHMETIC_EXPRESSION
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION          shift and go to state 118
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 84

    (24) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION . CLOSE_BRACKET
    (25) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION . CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (26) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION . CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . MINUS ARITHMETIC_EXPRESSION_P1

    CLOSE_BRACKET   shift and go to state 119
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98


state 85

    (22) VARIABLE_ASSIGNATION -> LET ID EQUALS . ARITHMETIC_EXPRESSION
    (29) USER_INTERACTION -> LET ID EQUALS . INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    INPUT           shift and go to state 121
    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION          shift and go to state 120
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 86

    (23) VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX . EQUALS ARITHMETIC_EXPRESSION

    EQUALS          shift and go to state 122


state 87

    (30) USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 123


state 88

    (31) STRINGS_SEQUENCE -> STRING . COMMA STRINGS_SEQUENCE
    (32) STRINGS_SEQUENCE -> STRING .

    COMMA           shift and go to state 124
    CLOSE_PARENTHESIS reduce using rule 32 (STRINGS_SEQUENCE -> STRING .)


state 89

    (33) STRINGS_SEQUENCE -> ID . COMMA STRINGS_SEQUENCE
    (34) STRINGS_SEQUENCE -> ID .

    COMMA           shift and go to state 125
    CLOSE_PARENTHESIS reduce using rule 34 (STRINGS_SEQUENCE -> ID .)


state 90

    (35) IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN . STATEMENTS ELSE_STATEMENT END IF
    (44) STATEMENTS -> . JUMPERS STATEMENTS
    (45) STATEMENTS -> . VARIABLE_ASSIGNATION STATEMENTS
    (46) STATEMENTS -> . USER_INTERACTION STATEMENTS
    (47) STATEMENTS -> . IF_STATEMENT STATEMENTS
    (48) STATEMENTS -> . WHILE_STATEMENT STATEMENTS
    (49) STATEMENTS -> . FOR_STATEMENT STATEMENTS
    (50) STATEMENTS -> . DO_STATEMENT STATEMENTS
    (51) STATEMENTS -> .
    (17) JUMPERS -> . GOSUB ID
    (18) JUMPERS -> . GOTO ID
    (19) JUMPERS -> . ID DOUBLE_POINTS
    (20) VARIABLE_ASSIGNATION -> . ID EQUALS ARITHMETIC_EXPRESSION
    (21) VARIABLE_ASSIGNATION -> . ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (22) VARIABLE_ASSIGNATION -> . LET ID EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> . LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (27) USER_INTERACTION -> . CLS
    (28) USER_INTERACTION -> . ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (29) USER_INTERACTION -> . LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (30) USER_INTERACTION -> . PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (35) IF_STATEMENT -> . IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
    (39) WHILE_STATEMENT -> . WHILE LOGICAL_EXPRESSION STATEMENTS WEND
    (41) FOR_STATEMENT -> . FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (40) DO_STATEMENT -> . DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION

    ELSE            reduce using rule 51 (STATEMENTS -> .)
    ELSEIF          reduce using rule 51 (STATEMENTS -> .)
    END             reduce using rule 51 (STATEMENTS -> .)
    GOSUB           shift and go to state 27
    GOTO            shift and go to state 29
    ID              shift and go to state 28
    LET             shift and go to state 30
    CLS             shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36

    STATEMENTS                     shift and go to state 126
    JUMPERS                        shift and go to state 20
    VARIABLE_ASSIGNATION           shift and go to state 21
    USER_INTERACTION               shift and go to state 22
    IF_STATEMENT                   shift and go to state 23
    WHILE_STATEMENT                shift and go to state 24
    FOR_STATEMENT                  shift and go to state 25
    DO_STATEMENT                   shift and go to state 26

state 91

    (72) LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR . LOGICAL_EXPRESSION_P1
    (73) LOGICAL_EXPRESSION_P1 -> . LOGICAL_EXPRESSION_P2
    (74) LOGICAL_EXPRESSION_P1 -> . LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2
    (75) LOGICAL_EXPRESSION_P2 -> . LOGICAL_EXPRESSION_P3
    (76) LOGICAL_EXPRESSION_P2 -> . NOT LOGICAL_EXPRESSION_P3
    (77) LOGICAL_EXPRESSION_P3 -> . OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS
    (78) LOGICAL_EXPRESSION_P3 -> . ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    NOT             shift and go to state 61
    OPEN_PARENTHESIS shift and go to state 62
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    LOGICAL_EXPRESSION_P1          shift and go to state 127
    LOGICAL_EXPRESSION_P2          shift and go to state 59
    LOGICAL_EXPRESSION_P3          shift and go to state 60
    ARITHMETIC_EXPRESSION          shift and go to state 63
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 92

    (74) LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND . LOGICAL_EXPRESSION_P2
    (75) LOGICAL_EXPRESSION_P2 -> . LOGICAL_EXPRESSION_P3
    (76) LOGICAL_EXPRESSION_P2 -> . NOT LOGICAL_EXPRESSION_P3
    (77) LOGICAL_EXPRESSION_P3 -> . OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS
    (78) LOGICAL_EXPRESSION_P3 -> . ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    NOT             shift and go to state 61
    OPEN_PARENTHESIS shift and go to state 62
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    LOGICAL_EXPRESSION_P2          shift and go to state 128
    LOGICAL_EXPRESSION_P3          shift and go to state 60
    ARITHMETIC_EXPRESSION          shift and go to state 63
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 93

    (76) LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .

    AND             reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    THEN            reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    OR              reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    GOSUB           reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    GOTO            reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    ID              reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    LET             reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    CLS             reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    PRINT           reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    IF              reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    WHILE           reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    FOR             reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    DO              reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    WEND            reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    CLOSE_PARENTHESIS reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    END             reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    LOOP            reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    RETURN          reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    ELSE            reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    ELSEIF          reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)
    NEXT            reduce using rule 76 (LOGICAL_EXPRESSION_P2 -> NOT LOGICAL_EXPRESSION_P3 .)


state 94

    (77) LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION . CLOSE_PARENTHESIS
    (72) LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION . OR LOGICAL_EXPRESSION_P1

    CLOSE_PARENTHESIS shift and go to state 129
    OR              shift and go to state 91


state 95

    (69) ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION . CLOSE_PARENTHESIS
    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . MINUS ARITHMETIC_EXPRESSION_P1
    (78) LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION . RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION
    (79) RELATIONAL_OPERATOR -> . EQUAL_TO
    (80) RELATIONAL_OPERATOR -> . DIFFERENT_TO
    (81) RELATIONAL_OPERATOR -> . LESS_THAN
    (82) RELATIONAL_OPERATOR -> . GREATER_THAN
    (83) RELATIONAL_OPERATOR -> . LESS_OR_EQUAL_THAN
    (84) RELATIONAL_OPERATOR -> . GREATER_OR_EQUAL_THAN

    CLOSE_PARENTHESIS shift and go to state 130
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    EQUAL_TO        shift and go to state 99
    DIFFERENT_TO    shift and go to state 100
    LESS_THAN       shift and go to state 101
    GREATER_THAN    shift and go to state 102
    LESS_OR_EQUAL_THAN shift and go to state 103
    GREATER_OR_EQUAL_THAN shift and go to state 104

    RELATIONAL_OPERATOR            shift and go to state 96

state 96

    (78) LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR . ARITHMETIC_EXPRESSION
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION          shift and go to state 131
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 97

    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS . ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION_P1       shift and go to state 132
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 98

    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS . ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION_P1       shift and go to state 133
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 99

    (79) RELATIONAL_OPERATOR -> EQUAL_TO .

    OPEN_PARENTHESIS reduce using rule 79 (RELATIONAL_OPERATOR -> EQUAL_TO .)
    ID              reduce using rule 79 (RELATIONAL_OPERATOR -> EQUAL_TO .)
    WORD_VALUE      reduce using rule 79 (RELATIONAL_OPERATOR -> EQUAL_TO .)
    FLOAT_VALUE     reduce using rule 79 (RELATIONAL_OPERATOR -> EQUAL_TO .)


state 100

    (80) RELATIONAL_OPERATOR -> DIFFERENT_TO .

    OPEN_PARENTHESIS reduce using rule 80 (RELATIONAL_OPERATOR -> DIFFERENT_TO .)
    ID              reduce using rule 80 (RELATIONAL_OPERATOR -> DIFFERENT_TO .)
    WORD_VALUE      reduce using rule 80 (RELATIONAL_OPERATOR -> DIFFERENT_TO .)
    FLOAT_VALUE     reduce using rule 80 (RELATIONAL_OPERATOR -> DIFFERENT_TO .)


state 101

    (81) RELATIONAL_OPERATOR -> LESS_THAN .

    OPEN_PARENTHESIS reduce using rule 81 (RELATIONAL_OPERATOR -> LESS_THAN .)
    ID              reduce using rule 81 (RELATIONAL_OPERATOR -> LESS_THAN .)
    WORD_VALUE      reduce using rule 81 (RELATIONAL_OPERATOR -> LESS_THAN .)
    FLOAT_VALUE     reduce using rule 81 (RELATIONAL_OPERATOR -> LESS_THAN .)


state 102

    (82) RELATIONAL_OPERATOR -> GREATER_THAN .

    OPEN_PARENTHESIS reduce using rule 82 (RELATIONAL_OPERATOR -> GREATER_THAN .)
    ID              reduce using rule 82 (RELATIONAL_OPERATOR -> GREATER_THAN .)
    WORD_VALUE      reduce using rule 82 (RELATIONAL_OPERATOR -> GREATER_THAN .)
    FLOAT_VALUE     reduce using rule 82 (RELATIONAL_OPERATOR -> GREATER_THAN .)


state 103

    (83) RELATIONAL_OPERATOR -> LESS_OR_EQUAL_THAN .

    OPEN_PARENTHESIS reduce using rule 83 (RELATIONAL_OPERATOR -> LESS_OR_EQUAL_THAN .)
    ID              reduce using rule 83 (RELATIONAL_OPERATOR -> LESS_OR_EQUAL_THAN .)
    WORD_VALUE      reduce using rule 83 (RELATIONAL_OPERATOR -> LESS_OR_EQUAL_THAN .)
    FLOAT_VALUE     reduce using rule 83 (RELATIONAL_OPERATOR -> LESS_OR_EQUAL_THAN .)


state 104

    (84) RELATIONAL_OPERATOR -> GREATER_OR_EQUAL_THAN .

    OPEN_PARENTHESIS reduce using rule 84 (RELATIONAL_OPERATOR -> GREATER_OR_EQUAL_THAN .)
    ID              reduce using rule 84 (RELATIONAL_OPERATOR -> GREATER_OR_EQUAL_THAN .)
    WORD_VALUE      reduce using rule 84 (RELATIONAL_OPERATOR -> GREATER_OR_EQUAL_THAN .)
    FLOAT_VALUE     reduce using rule 84 (RELATIONAL_OPERATOR -> GREATER_OR_EQUAL_THAN .)


state 105

    (63) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY . ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION_P2       shift and go to state 134
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 106

    (64) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT . ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION_P2       shift and go to state 135
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 107

    (65) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD . ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION_P2       shift and go to state 136
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 108

    (66) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN . ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION_P2       shift and go to state 137
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 109

    (68) ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY . ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION_P3       shift and go to state 138
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 110

    (56) ANY_VALUE -> ID OPEN_BRACKET . ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> ID OPEN_BRACKET . ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> ID OPEN_BRACKET . ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION          shift and go to state 139
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 111

    (39) WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS . WEND

    WEND            shift and go to state 140


state 112

    (41) FOR_STATEMENT -> FOR ID EQUALS . ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION          shift and go to state 141
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 113

    (40) DO_STATEMENT -> DO STATEMENTS LOOP . UNTIL LOGICAL_EXPRESSION

    UNTIL           shift and go to state 142


state 114

    (14) SUBPROCEDURES_DECLARATION -> SUB PROCEDURE ID STATEMENTS RETURN . SUBPROCEDURES_DECLARATION
    (14) SUBPROCEDURES_DECLARATION -> . SUB PROCEDURE ID STATEMENTS RETURN SUBPROCEDURES_DECLARATION
    (15) SUBPROCEDURES_DECLARATION -> .

    SUB             shift and go to state 10
    MAIN            reduce using rule 15 (SUBPROCEDURES_DECLARATION -> .)

    SUBPROCEDURES_DECLARATION      shift and go to state 143

state 115

    (11) DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE . CLOSE_BRACKET
    (12) DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE . COMMA SIMPLE_VALUE CLOSE_BRACKET
    (13) DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE . COMMA SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 144
    COMMA           shift and go to state 145


state 116

    (28) USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS . STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (31) STRINGS_SEQUENCE -> . STRING COMMA STRINGS_SEQUENCE
    (32) STRINGS_SEQUENCE -> . STRING
    (33) STRINGS_SEQUENCE -> . ID COMMA STRINGS_SEQUENCE
    (34) STRINGS_SEQUENCE -> . ID

    STRING          shift and go to state 88
    ID              shift and go to state 89

    STRINGS_SEQUENCE               shift and go to state 146

state 117

    (69) ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION . CLOSE_PARENTHESIS
    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . MINUS ARITHMETIC_EXPRESSION_P1

    CLOSE_PARENTHESIS shift and go to state 130
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98


state 118

    (21) VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .
    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . MINUS ARITHMETIC_EXPRESSION_P1

    GOSUB           reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    GOTO            reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    ID              reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    LET             reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    CLS             reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    PRINT           reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    IF              reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    WHILE           reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    FOR             reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    DO              reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    END             reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    LOOP            reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    RETURN          reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    WEND            reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    ELSE            reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    ELSEIF          reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    NEXT            reduce using rule 21 (VARIABLE_ASSIGNATION -> ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98


state 119

    (24) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .
    (25) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET . OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (26) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET . OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET

    EQUALS          reduce using rule 24 (DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    OPEN_BRACKET    shift and go to state 147


state 120

    (22) VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .
    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . MINUS ARITHMETIC_EXPRESSION_P1

    GOSUB           reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    GOTO            reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    ID              reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    LET             reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    CLS             reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    PRINT           reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    IF              reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    WHILE           reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    FOR             reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    DO              reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    END             reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    LOOP            reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    RETURN          reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    WEND            reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    ELSE            reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    ELSEIF          reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    NEXT            reduce using rule 22 (VARIABLE_ASSIGNATION -> LET ID EQUALS ARITHMETIC_EXPRESSION .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98


state 121

    (29) USER_INTERACTION -> LET ID EQUALS INPUT . OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 148


state 122

    (23) VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS . ARITHMETIC_EXPRESSION
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION          shift and go to state 149
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 123

    (30) USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .

    GOSUB           reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    GOTO            reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    ID              reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    LET             reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    CLS             reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    IF              reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    FOR             reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    DO              reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    END             reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    LOOP            reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    RETURN          reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    WEND            reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    ELSEIF          reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    NEXT            reduce using rule 30 (USER_INTERACTION -> PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)


state 124

    (31) STRINGS_SEQUENCE -> STRING COMMA . STRINGS_SEQUENCE
    (31) STRINGS_SEQUENCE -> . STRING COMMA STRINGS_SEQUENCE
    (32) STRINGS_SEQUENCE -> . STRING
    (33) STRINGS_SEQUENCE -> . ID COMMA STRINGS_SEQUENCE
    (34) STRINGS_SEQUENCE -> . ID

    STRING          shift and go to state 88
    ID              shift and go to state 89

    STRINGS_SEQUENCE               shift and go to state 150

state 125

    (33) STRINGS_SEQUENCE -> ID COMMA . STRINGS_SEQUENCE
    (31) STRINGS_SEQUENCE -> . STRING COMMA STRINGS_SEQUENCE
    (32) STRINGS_SEQUENCE -> . STRING
    (33) STRINGS_SEQUENCE -> . ID COMMA STRINGS_SEQUENCE
    (34) STRINGS_SEQUENCE -> . ID

    STRING          shift and go to state 88
    ID              shift and go to state 89

    STRINGS_SEQUENCE               shift and go to state 151

state 126

    (35) IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS . ELSE_STATEMENT END IF
    (36) ELSE_STATEMENT -> . ELSE STATEMENTS
    (37) ELSE_STATEMENT -> . ELSEIF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT
    (38) ELSE_STATEMENT -> .

    ELSE            shift and go to state 153
    ELSEIF          shift and go to state 154
    END             reduce using rule 38 (ELSE_STATEMENT -> .)

    ELSE_STATEMENT                 shift and go to state 152

state 127

    (72) LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .
    (74) LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 . AND LOGICAL_EXPRESSION_P2

    THEN            reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    OR              reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    GOSUB           reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    GOTO            reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    ID              reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    LET             reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    CLS             reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    PRINT           reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    IF              reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    WHILE           reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    FOR             reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    DO              reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    WEND            reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    CLOSE_PARENTHESIS reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    END             reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    LOOP            reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    RETURN          reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    ELSE            reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    ELSEIF          reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    NEXT            reduce using rule 72 (LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1 .)
    AND             shift and go to state 92


state 128

    (74) LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .

    AND             reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    THEN            reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    OR              reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    GOSUB           reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    GOTO            reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    ID              reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    LET             reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    CLS             reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    PRINT           reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    IF              reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    WHILE           reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    FOR             reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    DO              reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    WEND            reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    CLOSE_PARENTHESIS reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    END             reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    LOOP            reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    RETURN          reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    ELSE            reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    ELSEIF          reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)
    NEXT            reduce using rule 74 (LOGICAL_EXPRESSION_P1 -> LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2 .)


state 129

    (77) LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .

    AND             reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    THEN            reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    OR              reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    GOSUB           reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    GOTO            reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    ID              reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    LET             reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    CLS             reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    IF              reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    FOR             reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    DO              reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    WEND            reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    END             reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    LOOP            reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    RETURN          reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    ELSEIF          reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)
    NEXT            reduce using rule 77 (LOGICAL_EXPRESSION_P3 -> OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS .)


state 130

    (69) ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .

    POWER_BY        reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    MULTIPLY        reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    DIVIDE_FLOATING_POINT reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    MOD             reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    DIVIDE_ROUND_DOWN reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    PLUS            reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    MINUS           reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    EQUAL_TO        reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    DIFFERENT_TO    reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    LESS_THAN       reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    GREATER_THAN    reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    LESS_OR_EQUAL_THAN reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    GREATER_OR_EQUAL_THAN reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    GOSUB           reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    GOTO            reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    ID              reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    LET             reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    CLS             reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    IF              reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    FOR             reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    DO              reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    END             reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    LOOP            reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    RETURN          reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    WEND            reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    ELSEIF          reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    NEXT            reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    CLOSE_BRACKET   reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    AND             reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    THEN            reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    OR              reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    TO              reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)
    OPEN_BRACKET    reduce using rule 69 (ARITHMETIC_EXPRESSION_P3 -> OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS .)


state 131

    (78) LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .
    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . MINUS ARITHMETIC_EXPRESSION_P1

    AND             reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    THEN            reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    OR              reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    GOSUB           reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    GOTO            reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    ID              reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    LET             reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    CLS             reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    PRINT           reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    IF              reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    WHILE           reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    FOR             reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    DO              reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    WEND            reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    CLOSE_PARENTHESIS reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    END             reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    LOOP            reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    RETURN          reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    ELSE            reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    ELSEIF          reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    NEXT            reduce using rule 78 (LOGICAL_EXPRESSION_P3 -> ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98


state 132

    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .
    (63) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 . MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 . DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 . MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 . DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2

    PLUS            reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    MINUS           reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    EQUAL_TO        reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    DIFFERENT_TO    reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    LESS_THAN       reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    GREATER_THAN    reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    LESS_OR_EQUAL_THAN reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    GREATER_OR_EQUAL_THAN reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    GOSUB           reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    GOTO            reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    ID              reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    LET             reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    CLS             reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    PRINT           reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    IF              reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    WHILE           reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    FOR             reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    DO              reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    END             reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    LOOP            reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    RETURN          reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    WEND            reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    ELSE            reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    ELSEIF          reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    NEXT            reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    CLOSE_BRACKET   reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    CLOSE_PARENTHESIS reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    AND             reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    THEN            reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    OR              reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    TO              reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    OPEN_BRACKET    reduce using rule 60 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1 .)
    MULTIPLY        shift and go to state 105
    DIVIDE_FLOATING_POINT shift and go to state 106
    MOD             shift and go to state 107
    DIVIDE_ROUND_DOWN shift and go to state 108


state 133

    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .
    (63) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 . MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 . DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 . MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 . DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2

    PLUS            reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    MINUS           reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    EQUAL_TO        reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    DIFFERENT_TO    reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    LESS_THAN       reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    GREATER_THAN    reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    LESS_OR_EQUAL_THAN reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    GREATER_OR_EQUAL_THAN reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    GOSUB           reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    GOTO            reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    ID              reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    LET             reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    CLS             reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    PRINT           reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    IF              reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    WHILE           reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    FOR             reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    DO              reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    END             reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    LOOP            reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    RETURN          reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    WEND            reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    ELSE            reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    ELSEIF          reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    NEXT            reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    CLOSE_BRACKET   reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    CLOSE_PARENTHESIS reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    AND             reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    THEN            reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    OR              reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    TO              reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    OPEN_BRACKET    reduce using rule 61 (ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1 .)
    MULTIPLY        shift and go to state 105
    DIVIDE_FLOATING_POINT shift and go to state 106
    MOD             shift and go to state 107
    DIVIDE_ROUND_DOWN shift and go to state 108


state 134

    (63) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .
    (68) ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 . POWER_BY ARITHMETIC_EXPRESSION_P3

    MULTIPLY        reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    DIVIDE_FLOATING_POINT reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    MOD             reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    DIVIDE_ROUND_DOWN reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    PLUS            reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    MINUS           reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    EQUAL_TO        reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    DIFFERENT_TO    reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    LESS_THAN       reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    GREATER_THAN    reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    LESS_OR_EQUAL_THAN reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    GREATER_OR_EQUAL_THAN reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    GOSUB           reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    GOTO            reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    ID              reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    LET             reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    CLS             reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    PRINT           reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    IF              reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    WHILE           reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    FOR             reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    DO              reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    END             reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    LOOP            reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    RETURN          reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    WEND            reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    ELSE            reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    ELSEIF          reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    NEXT            reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    CLOSE_BRACKET   reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    CLOSE_PARENTHESIS reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    AND             reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    THEN            reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    OR              reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    TO              reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    OPEN_BRACKET    reduce using rule 63 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2 .)
    POWER_BY        shift and go to state 109


state 135

    (64) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .
    (68) ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 . POWER_BY ARITHMETIC_EXPRESSION_P3

    MULTIPLY        reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    DIVIDE_FLOATING_POINT reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    MOD             reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    DIVIDE_ROUND_DOWN reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    PLUS            reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    MINUS           reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    EQUAL_TO        reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    DIFFERENT_TO    reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    LESS_THAN       reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    GREATER_THAN    reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    LESS_OR_EQUAL_THAN reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    GREATER_OR_EQUAL_THAN reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    GOSUB           reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    GOTO            reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    ID              reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    LET             reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    CLS             reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    PRINT           reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    IF              reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    WHILE           reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    FOR             reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    DO              reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    END             reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    LOOP            reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    RETURN          reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    WEND            reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    ELSE            reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    ELSEIF          reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    NEXT            reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    CLOSE_BRACKET   reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    CLOSE_PARENTHESIS reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    AND             reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    THEN            reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    OR              reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    TO              reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    OPEN_BRACKET    reduce using rule 64 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2 .)
    POWER_BY        shift and go to state 109


state 136

    (65) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .
    (68) ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 . POWER_BY ARITHMETIC_EXPRESSION_P3

    MULTIPLY        reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    DIVIDE_FLOATING_POINT reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    MOD             reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    DIVIDE_ROUND_DOWN reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    PLUS            reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    MINUS           reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    EQUAL_TO        reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    DIFFERENT_TO    reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    LESS_THAN       reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    GREATER_THAN    reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    LESS_OR_EQUAL_THAN reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    GREATER_OR_EQUAL_THAN reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    GOSUB           reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    GOTO            reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    ID              reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    LET             reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    CLS             reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    PRINT           reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    IF              reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    WHILE           reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    FOR             reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    DO              reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    END             reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    LOOP            reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    RETURN          reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    WEND            reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    ELSE            reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    ELSEIF          reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    NEXT            reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    CLOSE_BRACKET   reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    CLOSE_PARENTHESIS reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    AND             reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    THEN            reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    OR              reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    TO              reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    OPEN_BRACKET    reduce using rule 65 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2 .)
    POWER_BY        shift and go to state 109


state 137

    (66) ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .
    (68) ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 . POWER_BY ARITHMETIC_EXPRESSION_P3

    MULTIPLY        reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    DIVIDE_FLOATING_POINT reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    MOD             reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    DIVIDE_ROUND_DOWN reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    PLUS            reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    MINUS           reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    EQUAL_TO        reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    DIFFERENT_TO    reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    LESS_THAN       reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    GREATER_THAN    reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    LESS_OR_EQUAL_THAN reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    GREATER_OR_EQUAL_THAN reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    GOSUB           reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    GOTO            reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    ID              reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    LET             reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    CLS             reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    PRINT           reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    IF              reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    WHILE           reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    FOR             reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    DO              reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    END             reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    LOOP            reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    RETURN          reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    WEND            reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    ELSE            reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    ELSEIF          reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    NEXT            reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    CLOSE_BRACKET   reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    CLOSE_PARENTHESIS reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    AND             reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    THEN            reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    OR              reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    TO              reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    OPEN_BRACKET    reduce using rule 66 (ARITHMETIC_EXPRESSION_P1 -> ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2 .)
    POWER_BY        shift and go to state 109


state 138

    (68) ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .

    POWER_BY        reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    MULTIPLY        reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    DIVIDE_FLOATING_POINT reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    MOD             reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    DIVIDE_ROUND_DOWN reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    PLUS            reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    MINUS           reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    EQUAL_TO        reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    DIFFERENT_TO    reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    LESS_THAN       reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    GREATER_THAN    reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    LESS_OR_EQUAL_THAN reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    GREATER_OR_EQUAL_THAN reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    GOSUB           reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    GOTO            reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    ID              reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    LET             reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    CLS             reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    PRINT           reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    IF              reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    WHILE           reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    FOR             reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    DO              reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    END             reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    LOOP            reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    RETURN          reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    WEND            reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    ELSE            reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    ELSEIF          reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    NEXT            reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    CLOSE_BRACKET   reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    CLOSE_PARENTHESIS reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    AND             reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    THEN            reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    OR              reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    TO              reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)
    OPEN_BRACKET    reduce using rule 68 (ARITHMETIC_EXPRESSION_P2 -> ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3 .)


state 139

    (56) ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION . CLOSE_BRACKET
    (57) ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION . CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION . CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . MINUS ARITHMETIC_EXPRESSION_P1

    CLOSE_BRACKET   shift and go to state 155
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98


state 140

    (39) WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .

    GOSUB           reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)
    GOTO            reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)
    ID              reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)
    LET             reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)
    CLS             reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)
    PRINT           reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)
    IF              reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)
    WHILE           reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)
    FOR             reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)
    DO              reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)
    END             reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)
    LOOP            reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)
    RETURN          reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)
    WEND            reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)
    ELSE            reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)
    ELSEIF          reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)
    NEXT            reduce using rule 39 (WHILE_STATEMENT -> WHILE LOGICAL_EXPRESSION STATEMENTS WEND .)


state 141

    (41) FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION . TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . MINUS ARITHMETIC_EXPRESSION_P1

    TO              shift and go to state 156
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98


state 142

    (40) DO_STATEMENT -> DO STATEMENTS LOOP UNTIL . LOGICAL_EXPRESSION
    (71) LOGICAL_EXPRESSION -> . LOGICAL_EXPRESSION_P1
    (72) LOGICAL_EXPRESSION -> . LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1
    (73) LOGICAL_EXPRESSION_P1 -> . LOGICAL_EXPRESSION_P2
    (74) LOGICAL_EXPRESSION_P1 -> . LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2
    (75) LOGICAL_EXPRESSION_P2 -> . LOGICAL_EXPRESSION_P3
    (76) LOGICAL_EXPRESSION_P2 -> . NOT LOGICAL_EXPRESSION_P3
    (77) LOGICAL_EXPRESSION_P3 -> . OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS
    (78) LOGICAL_EXPRESSION_P3 -> . ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    NOT             shift and go to state 61
    OPEN_PARENTHESIS shift and go to state 62
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    LOGICAL_EXPRESSION             shift and go to state 157
    LOGICAL_EXPRESSION_P1          shift and go to state 58
    LOGICAL_EXPRESSION_P2          shift and go to state 59
    LOGICAL_EXPRESSION_P3          shift and go to state 60
    ARITHMETIC_EXPRESSION          shift and go to state 63
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 143

    (14) SUBPROCEDURES_DECLARATION -> SUB PROCEDURE ID STATEMENTS RETURN SUBPROCEDURES_DECLARATION .

    MAIN            reduce using rule 14 (SUBPROCEDURES_DECLARATION -> SUB PROCEDURE ID STATEMENTS RETURN SUBPROCEDURES_DECLARATION .)


state 144

    (11) DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET .

    DIM             reduce using rule 11 (DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET .)
    SUB             reduce using rule 11 (DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET .)
    MAIN            reduce using rule 11 (DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET .)


state 145

    (12) DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE COMMA . SIMPLE_VALUE CLOSE_BRACKET
    (13) DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE COMMA . SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    SIMPLE_VALUE                   shift and go to state 158

state 146

    (28) USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 159


state 147

    (25) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET . ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (26) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET . ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION          shift and go to state 160
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 148

    (29) USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS . STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (31) STRINGS_SEQUENCE -> . STRING COMMA STRINGS_SEQUENCE
    (32) STRINGS_SEQUENCE -> . STRING
    (33) STRINGS_SEQUENCE -> . ID COMMA STRINGS_SEQUENCE
    (34) STRINGS_SEQUENCE -> . ID

    STRING          shift and go to state 88
    ID              shift and go to state 89

    STRINGS_SEQUENCE               shift and go to state 161

state 149

    (23) VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .
    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . MINUS ARITHMETIC_EXPRESSION_P1

    GOSUB           reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    GOTO            reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    ID              reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    LET             reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    CLS             reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    PRINT           reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    IF              reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    WHILE           reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    FOR             reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    DO              reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    END             reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    LOOP            reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    RETURN          reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    WEND            reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    ELSE            reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    ELSEIF          reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    NEXT            reduce using rule 23 (VARIABLE_ASSIGNATION -> LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98


state 150

    (31) STRINGS_SEQUENCE -> STRING COMMA STRINGS_SEQUENCE .

    CLOSE_PARENTHESIS reduce using rule 31 (STRINGS_SEQUENCE -> STRING COMMA STRINGS_SEQUENCE .)


state 151

    (33) STRINGS_SEQUENCE -> ID COMMA STRINGS_SEQUENCE .

    CLOSE_PARENTHESIS reduce using rule 33 (STRINGS_SEQUENCE -> ID COMMA STRINGS_SEQUENCE .)


state 152

    (35) IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT . END IF

    END             shift and go to state 162


state 153

    (36) ELSE_STATEMENT -> ELSE . STATEMENTS
    (44) STATEMENTS -> . JUMPERS STATEMENTS
    (45) STATEMENTS -> . VARIABLE_ASSIGNATION STATEMENTS
    (46) STATEMENTS -> . USER_INTERACTION STATEMENTS
    (47) STATEMENTS -> . IF_STATEMENT STATEMENTS
    (48) STATEMENTS -> . WHILE_STATEMENT STATEMENTS
    (49) STATEMENTS -> . FOR_STATEMENT STATEMENTS
    (50) STATEMENTS -> . DO_STATEMENT STATEMENTS
    (51) STATEMENTS -> .
    (17) JUMPERS -> . GOSUB ID
    (18) JUMPERS -> . GOTO ID
    (19) JUMPERS -> . ID DOUBLE_POINTS
    (20) VARIABLE_ASSIGNATION -> . ID EQUALS ARITHMETIC_EXPRESSION
    (21) VARIABLE_ASSIGNATION -> . ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (22) VARIABLE_ASSIGNATION -> . LET ID EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> . LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (27) USER_INTERACTION -> . CLS
    (28) USER_INTERACTION -> . ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (29) USER_INTERACTION -> . LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (30) USER_INTERACTION -> . PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (35) IF_STATEMENT -> . IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
    (39) WHILE_STATEMENT -> . WHILE LOGICAL_EXPRESSION STATEMENTS WEND
    (41) FOR_STATEMENT -> . FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (40) DO_STATEMENT -> . DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION

    END             reduce using rule 51 (STATEMENTS -> .)
    GOSUB           shift and go to state 27
    GOTO            shift and go to state 29
    ID              shift and go to state 28
    LET             shift and go to state 30
    CLS             shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36

    STATEMENTS                     shift and go to state 163
    JUMPERS                        shift and go to state 20
    VARIABLE_ASSIGNATION           shift and go to state 21
    USER_INTERACTION               shift and go to state 22
    IF_STATEMENT                   shift and go to state 23
    WHILE_STATEMENT                shift and go to state 24
    FOR_STATEMENT                  shift and go to state 25
    DO_STATEMENT                   shift and go to state 26

state 154

    (37) ELSE_STATEMENT -> ELSEIF . LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT
    (71) LOGICAL_EXPRESSION -> . LOGICAL_EXPRESSION_P1
    (72) LOGICAL_EXPRESSION -> . LOGICAL_EXPRESSION OR LOGICAL_EXPRESSION_P1
    (73) LOGICAL_EXPRESSION_P1 -> . LOGICAL_EXPRESSION_P2
    (74) LOGICAL_EXPRESSION_P1 -> . LOGICAL_EXPRESSION_P1 AND LOGICAL_EXPRESSION_P2
    (75) LOGICAL_EXPRESSION_P2 -> . LOGICAL_EXPRESSION_P3
    (76) LOGICAL_EXPRESSION_P2 -> . NOT LOGICAL_EXPRESSION_P3
    (77) LOGICAL_EXPRESSION_P3 -> . OPEN_PARENTHESIS LOGICAL_EXPRESSION CLOSE_PARENTHESIS
    (78) LOGICAL_EXPRESSION_P3 -> . ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    NOT             shift and go to state 61
    OPEN_PARENTHESIS shift and go to state 62
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    LOGICAL_EXPRESSION             shift and go to state 164
    LOGICAL_EXPRESSION_P1          shift and go to state 58
    LOGICAL_EXPRESSION_P2          shift and go to state 59
    LOGICAL_EXPRESSION_P3          shift and go to state 60
    ARITHMETIC_EXPRESSION          shift and go to state 63
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 155

    (56) ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .
    (57) ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET . OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET . OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    POWER_BY        reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    DIVIDE_FLOATING_POINT reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    MOD             reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    DIVIDE_ROUND_DOWN reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    PLUS            reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    MINUS           reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    EQUAL_TO        reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    DIFFERENT_TO    reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    LESS_THAN       reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    GREATER_THAN    reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    LESS_OR_EQUAL_THAN reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    GREATER_OR_EQUAL_THAN reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    GOSUB           reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    GOTO            reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    ID              reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    LET             reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    CLS             reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    PRINT           reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    IF              reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    WHILE           reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    FOR             reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    DO              reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    END             reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    LOOP            reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    RETURN          reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    WEND            reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    ELSE            reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    ELSEIF          reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    NEXT            reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    CLOSE_PARENTHESIS reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    AND             reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    THEN            reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    OR              reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    TO              reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    OPEN_BRACKET    shift and go to state 165

  ! OPEN_BRACKET    [ reduce using rule 56 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .) ]


state 156

    (41) FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO . ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION          shift and go to state 166
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 157

    (40) DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .
    (72) LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION . OR LOGICAL_EXPRESSION_P1

    GOSUB           reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    GOTO            reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    ID              reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    LET             reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    CLS             reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    PRINT           reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    IF              reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    WHILE           reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    FOR             reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    DO              reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    END             reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    LOOP            reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    RETURN          reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    WEND            reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    ELSE            reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    ELSEIF          reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    NEXT            reduce using rule 40 (DO_STATEMENT -> DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION .)
    OR              shift and go to state 91


state 158

    (12) DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE . CLOSE_BRACKET
    (13) DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE . COMMA SIMPLE_VALUE CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 168
    COMMA           shift and go to state 167


state 159

    (28) USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .

    GOSUB           reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    GOTO            reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    ID              reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    LET             reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    CLS             reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    IF              reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    FOR             reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    DO              reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    END             reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    LOOP            reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    RETURN          reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    WEND            reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    ELSEIF          reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    NEXT            reduce using rule 28 (USER_INTERACTION -> ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)


state 160

    (25) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION . CLOSE_BRACKET
    (26) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION . CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . MINUS ARITHMETIC_EXPRESSION_P1

    CLOSE_BRACKET   shift and go to state 169
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98


state 161

    (29) USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 170


state 162

    (35) IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END . IF

    IF              shift and go to state 171


state 163

    (36) ELSE_STATEMENT -> ELSE STATEMENTS .

    END             reduce using rule 36 (ELSE_STATEMENT -> ELSE STATEMENTS .)


state 164

    (37) ELSE_STATEMENT -> ELSEIF LOGICAL_EXPRESSION . THEN STATEMENTS ELSE_STATEMENT
    (72) LOGICAL_EXPRESSION -> LOGICAL_EXPRESSION . OR LOGICAL_EXPRESSION_P1

    THEN            shift and go to state 172
    OR              shift and go to state 91


state 165

    (57) ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET . ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET . ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION          shift and go to state 173
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 166

    (41) FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION . SET_FOR_STEPS STATEMENTS NEXT ID
    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . MINUS ARITHMETIC_EXPRESSION_P1
    (42) SET_FOR_STEPS -> . OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET
    (43) SET_FOR_STEPS -> .

    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    OPEN_BRACKET    shift and go to state 175
    GOSUB           reduce using rule 43 (SET_FOR_STEPS -> .)
    GOTO            reduce using rule 43 (SET_FOR_STEPS -> .)
    ID              reduce using rule 43 (SET_FOR_STEPS -> .)
    LET             reduce using rule 43 (SET_FOR_STEPS -> .)
    CLS             reduce using rule 43 (SET_FOR_STEPS -> .)
    PRINT           reduce using rule 43 (SET_FOR_STEPS -> .)
    IF              reduce using rule 43 (SET_FOR_STEPS -> .)
    WHILE           reduce using rule 43 (SET_FOR_STEPS -> .)
    FOR             reduce using rule 43 (SET_FOR_STEPS -> .)
    DO              reduce using rule 43 (SET_FOR_STEPS -> .)
    NEXT            reduce using rule 43 (SET_FOR_STEPS -> .)

    SET_FOR_STEPS                  shift and go to state 174

state 167

    (13) DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE COMMA . SIMPLE_VALUE CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    SIMPLE_VALUE                   shift and go to state 176

state 168

    (12) DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET .

    DIM             reduce using rule 12 (DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET .)
    SUB             reduce using rule 12 (DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET .)
    MAIN            reduce using rule 12 (DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET .)


state 169

    (25) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .
    (26) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET . OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET

    EQUALS          reduce using rule 25 (DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    OPEN_BRACKET    shift and go to state 177


state 170

    (29) USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .

    GOSUB           reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    GOTO            reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    ID              reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    LET             reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    CLS             reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    IF              reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    FOR             reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    DO              reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    END             reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    LOOP            reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    RETURN          reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    WEND            reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    ELSEIF          reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)
    NEXT            reduce using rule 29 (USER_INTERACTION -> LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS .)


state 171

    (35) IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .

    GOSUB           reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)
    GOTO            reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)
    ID              reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)
    LET             reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)
    CLS             reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)
    PRINT           reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)
    IF              reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)
    WHILE           reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)
    FOR             reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)
    DO              reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)
    END             reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)
    LOOP            reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)
    RETURN          reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)
    WEND            reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)
    ELSE            reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)
    ELSEIF          reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)
    NEXT            reduce using rule 35 (IF_STATEMENT -> IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF .)


state 172

    (37) ELSE_STATEMENT -> ELSEIF LOGICAL_EXPRESSION THEN . STATEMENTS ELSE_STATEMENT
    (44) STATEMENTS -> . JUMPERS STATEMENTS
    (45) STATEMENTS -> . VARIABLE_ASSIGNATION STATEMENTS
    (46) STATEMENTS -> . USER_INTERACTION STATEMENTS
    (47) STATEMENTS -> . IF_STATEMENT STATEMENTS
    (48) STATEMENTS -> . WHILE_STATEMENT STATEMENTS
    (49) STATEMENTS -> . FOR_STATEMENT STATEMENTS
    (50) STATEMENTS -> . DO_STATEMENT STATEMENTS
    (51) STATEMENTS -> .
    (17) JUMPERS -> . GOSUB ID
    (18) JUMPERS -> . GOTO ID
    (19) JUMPERS -> . ID DOUBLE_POINTS
    (20) VARIABLE_ASSIGNATION -> . ID EQUALS ARITHMETIC_EXPRESSION
    (21) VARIABLE_ASSIGNATION -> . ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (22) VARIABLE_ASSIGNATION -> . LET ID EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> . LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (27) USER_INTERACTION -> . CLS
    (28) USER_INTERACTION -> . ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (29) USER_INTERACTION -> . LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (30) USER_INTERACTION -> . PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (35) IF_STATEMENT -> . IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
    (39) WHILE_STATEMENT -> . WHILE LOGICAL_EXPRESSION STATEMENTS WEND
    (41) FOR_STATEMENT -> . FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (40) DO_STATEMENT -> . DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION

    ELSE            reduce using rule 51 (STATEMENTS -> .)
    ELSEIF          reduce using rule 51 (STATEMENTS -> .)
    END             reduce using rule 51 (STATEMENTS -> .)
    GOSUB           shift and go to state 27
    GOTO            shift and go to state 29
    ID              shift and go to state 28
    LET             shift and go to state 30
    CLS             shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36

    STATEMENTS                     shift and go to state 178
    JUMPERS                        shift and go to state 20
    VARIABLE_ASSIGNATION           shift and go to state 21
    USER_INTERACTION               shift and go to state 22
    IF_STATEMENT                   shift and go to state 23
    WHILE_STATEMENT                shift and go to state 24
    FOR_STATEMENT                  shift and go to state 25
    DO_STATEMENT                   shift and go to state 26

state 173

    (57) ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION . CLOSE_BRACKET
    (58) ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION . CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . MINUS ARITHMETIC_EXPRESSION_P1

    CLOSE_BRACKET   shift and go to state 179
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98


state 174

    (41) FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS . STATEMENTS NEXT ID
    (44) STATEMENTS -> . JUMPERS STATEMENTS
    (45) STATEMENTS -> . VARIABLE_ASSIGNATION STATEMENTS
    (46) STATEMENTS -> . USER_INTERACTION STATEMENTS
    (47) STATEMENTS -> . IF_STATEMENT STATEMENTS
    (48) STATEMENTS -> . WHILE_STATEMENT STATEMENTS
    (49) STATEMENTS -> . FOR_STATEMENT STATEMENTS
    (50) STATEMENTS -> . DO_STATEMENT STATEMENTS
    (51) STATEMENTS -> .
    (17) JUMPERS -> . GOSUB ID
    (18) JUMPERS -> . GOTO ID
    (19) JUMPERS -> . ID DOUBLE_POINTS
    (20) VARIABLE_ASSIGNATION -> . ID EQUALS ARITHMETIC_EXPRESSION
    (21) VARIABLE_ASSIGNATION -> . ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (22) VARIABLE_ASSIGNATION -> . LET ID EQUALS ARITHMETIC_EXPRESSION
    (23) VARIABLE_ASSIGNATION -> . LET ID DIMENSIONAL_VAR_INDEX EQUALS ARITHMETIC_EXPRESSION
    (27) USER_INTERACTION -> . CLS
    (28) USER_INTERACTION -> . ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (29) USER_INTERACTION -> . LET ID EQUALS INPUT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (30) USER_INTERACTION -> . PRINT OPEN_PARENTHESIS STRINGS_SEQUENCE CLOSE_PARENTHESIS
    (35) IF_STATEMENT -> . IF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT END IF
    (39) WHILE_STATEMENT -> . WHILE LOGICAL_EXPRESSION STATEMENTS WEND
    (41) FOR_STATEMENT -> . FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID
    (40) DO_STATEMENT -> . DO STATEMENTS LOOP UNTIL LOGICAL_EXPRESSION

    NEXT            reduce using rule 51 (STATEMENTS -> .)
    GOSUB           shift and go to state 27
    GOTO            shift and go to state 29
    ID              shift and go to state 28
    LET             shift and go to state 30
    CLS             shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36

    STATEMENTS                     shift and go to state 180
    JUMPERS                        shift and go to state 20
    VARIABLE_ASSIGNATION           shift and go to state 21
    USER_INTERACTION               shift and go to state 22
    IF_STATEMENT                   shift and go to state 23
    WHILE_STATEMENT                shift and go to state 24
    FOR_STATEMENT                  shift and go to state 25
    DO_STATEMENT                   shift and go to state 26

state 175

    (42) SET_FOR_STEPS -> OPEN_BRACKET . SIMPLE_VALUE CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    SIMPLE_VALUE                   shift and go to state 181

state 176

    (13) DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE COMMA SIMPLE_VALUE . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 182


state 177

    (26) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET . ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION          shift and go to state 183
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 178

    (37) ELSE_STATEMENT -> ELSEIF LOGICAL_EXPRESSION THEN STATEMENTS . ELSE_STATEMENT
    (36) ELSE_STATEMENT -> . ELSE STATEMENTS
    (37) ELSE_STATEMENT -> . ELSEIF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT
    (38) ELSE_STATEMENT -> .

    ELSE            shift and go to state 153
    ELSEIF          shift and go to state 154
    END             reduce using rule 38 (ELSE_STATEMENT -> .)

    ELSE_STATEMENT                 shift and go to state 184

state 179

    (57) ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .
    (58) ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET . OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    POWER_BY        reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    DIVIDE_FLOATING_POINT reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    MOD             reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    DIVIDE_ROUND_DOWN reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    PLUS            reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    MINUS           reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    EQUAL_TO        reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    DIFFERENT_TO    reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    LESS_THAN       reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    GREATER_THAN    reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    LESS_OR_EQUAL_THAN reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    GREATER_OR_EQUAL_THAN reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    GOSUB           reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    GOTO            reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    ID              reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    LET             reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    CLS             reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    PRINT           reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    IF              reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    WHILE           reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    FOR             reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    DO              reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    END             reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    LOOP            reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    RETURN          reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    WEND            reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    ELSE            reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    ELSEIF          reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    NEXT            reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    CLOSE_PARENTHESIS reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    AND             reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    THEN            reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    OR              reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    TO              reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    OPEN_BRACKET    shift and go to state 185

  ! OPEN_BRACKET    [ reduce using rule 57 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .) ]


state 180

    (41) FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS . NEXT ID

    NEXT            shift and go to state 186


state 181

    (42) SET_FOR_STEPS -> OPEN_BRACKET SIMPLE_VALUE . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 187


state 182

    (13) DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET .

    DIM             reduce using rule 13 (DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET .)
    SUB             reduce using rule 13 (DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET .)
    MAIN            reduce using rule 13 (DIMENSIONAL_VAR_DECLARATION -> OPEN_BRACKET SIMPLE_VALUE COMMA SIMPLE_VALUE COMMA SIMPLE_VALUE CLOSE_BRACKET .)


state 183

    (26) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION . CLOSE_BRACKET
    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . MINUS ARITHMETIC_EXPRESSION_P1

    CLOSE_BRACKET   shift and go to state 188
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98


state 184

    (37) ELSE_STATEMENT -> ELSEIF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT .

    END             reduce using rule 37 (ELSE_STATEMENT -> ELSEIF LOGICAL_EXPRESSION THEN STATEMENTS ELSE_STATEMENT .)


state 185

    (58) ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET . ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (59) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION_P1
    (60) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION MINUS ARITHMETIC_EXPRESSION_P1
    (62) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P2
    (63) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MULTIPLY ARITHMETIC_EXPRESSION_P2
    (64) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_FLOATING_POINT ARITHMETIC_EXPRESSION_P2
    (65) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 MOD ARITHMETIC_EXPRESSION_P2
    (66) ARITHMETIC_EXPRESSION_P1 -> . ARITHMETIC_EXPRESSION_P1 DIVIDE_ROUND_DOWN ARITHMETIC_EXPRESSION_P2
    (67) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P3
    (68) ARITHMETIC_EXPRESSION_P2 -> . ARITHMETIC_EXPRESSION_P2 POWER_BY ARITHMETIC_EXPRESSION_P3
    (69) ARITHMETIC_EXPRESSION_P3 -> . OPEN_PARENTHESIS ARITHMETIC_EXPRESSION CLOSE_PARENTHESIS
    (70) ARITHMETIC_EXPRESSION_P3 -> . ANY_VALUE
    (54) ANY_VALUE -> . SIMPLE_VALUE
    (55) ANY_VALUE -> . ID
    (56) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (57) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (58) ANY_VALUE -> . ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET
    (52) SIMPLE_VALUE -> . WORD_VALUE
    (53) SIMPLE_VALUE -> . FLOAT_VALUE

    OPEN_PARENTHESIS shift and go to state 82
    ID              shift and go to state 69
    WORD_VALUE      shift and go to state 70
    FLOAT_VALUE     shift and go to state 71

    ARITHMETIC_EXPRESSION          shift and go to state 189
    ARITHMETIC_EXPRESSION_P1       shift and go to state 64
    ARITHMETIC_EXPRESSION_P2       shift and go to state 65
    ARITHMETIC_EXPRESSION_P3       shift and go to state 66
    ANY_VALUE                      shift and go to state 67
    SIMPLE_VALUE                   shift and go to state 68

state 186

    (41) FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT . ID

    ID              shift and go to state 190


state 187

    (42) SET_FOR_STEPS -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET .

    GOSUB           reduce using rule 42 (SET_FOR_STEPS -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET .)
    GOTO            reduce using rule 42 (SET_FOR_STEPS -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET .)
    ID              reduce using rule 42 (SET_FOR_STEPS -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET .)
    LET             reduce using rule 42 (SET_FOR_STEPS -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET .)
    CLS             reduce using rule 42 (SET_FOR_STEPS -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET .)
    PRINT           reduce using rule 42 (SET_FOR_STEPS -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET .)
    IF              reduce using rule 42 (SET_FOR_STEPS -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET .)
    WHILE           reduce using rule 42 (SET_FOR_STEPS -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET .)
    FOR             reduce using rule 42 (SET_FOR_STEPS -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET .)
    DO              reduce using rule 42 (SET_FOR_STEPS -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET .)
    NEXT            reduce using rule 42 (SET_FOR_STEPS -> OPEN_BRACKET SIMPLE_VALUE CLOSE_BRACKET .)


state 188

    (26) DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .

    EQUALS          reduce using rule 26 (DIMENSIONAL_VAR_INDEX -> OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)


state 189

    (58) ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION . CLOSE_BRACKET
    (60) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . PLUS ARITHMETIC_EXPRESSION_P1
    (61) ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . MINUS ARITHMETIC_EXPRESSION_P1

    CLOSE_BRACKET   shift and go to state 191
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98


state 190

    (41) FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .

    GOSUB           reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)
    GOTO            reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)
    ID              reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)
    LET             reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)
    CLS             reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)
    PRINT           reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)
    IF              reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)
    WHILE           reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)
    FOR             reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)
    DO              reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)
    END             reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)
    LOOP            reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)
    RETURN          reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)
    WEND            reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)
    ELSE            reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)
    ELSEIF          reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)
    NEXT            reduce using rule 41 (FOR_STATEMENT -> FOR ID EQUALS ARITHMETIC_EXPRESSION TO ARITHMETIC_EXPRESSION SET_FOR_STEPS STATEMENTS NEXT ID .)


state 191

    (58) ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .

    POWER_BY        reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    DIVIDE_FLOATING_POINT reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    MOD             reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    DIVIDE_ROUND_DOWN reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    PLUS            reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    MINUS           reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    EQUAL_TO        reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    DIFFERENT_TO    reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    LESS_THAN       reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    GREATER_THAN    reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    LESS_OR_EQUAL_THAN reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    GREATER_OR_EQUAL_THAN reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    GOSUB           reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    GOTO            reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    ID              reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    LET             reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    CLS             reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    PRINT           reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    IF              reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    WHILE           reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    FOR             reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    DO              reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    END             reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    LOOP            reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    RETURN          reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    WEND            reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    ELSE            reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    ELSEIF          reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    NEXT            reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    CLOSE_PARENTHESIS reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    AND             reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    THEN            reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    OR              reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    TO              reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 58 (ANY_VALUE -> ID OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET OPEN_BRACKET ARITHMETIC_EXPRESSION CLOSE_BRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OPEN_BRACKET in state 69 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKET in state 155 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKET in state 179 resolved as shift
